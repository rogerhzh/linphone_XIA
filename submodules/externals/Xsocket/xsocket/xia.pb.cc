// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xia.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xia {

namespace {

const ::google::protobuf::Descriptor* XSocketMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XSocketMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Socket_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Socket_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Bind_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Bind_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Close_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Close_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Connect_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Connect_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Accept_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Accept_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Sendto_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Sendto_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Send_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Send_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Recv_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Recv_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Recvfrom_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Recvfrom_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Setsockopt_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Setsockopt_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Getsockopt_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Getsockopt_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Putchunk_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Putchunk_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Requestchunk_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Requestchunk_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Getchunkstatus_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Getchunkstatus_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Readchunk_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Readchunk_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Removechunk_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Removechunk_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Result_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Result_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Requestfailed_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Requestfailed_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Changead_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Changead_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_ReadLocalHostAddr_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_ReadLocalHostAddr_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_Updatenameserverdag_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_Updatenameserverdag_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_ReadNameServerDag_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_ReadNameServerDag_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_IsDualStackRouter_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_IsDualStackRouter_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_GetPeername_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_GetPeername_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* X_GetSockname_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  X_GetSockname_Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* msg_MsgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* msg_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XSocketCallType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_xia_2eproto() {
  protobuf_AddDesc_xia_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xia.proto");
  GOOGLE_CHECK(file != NULL);
  XSocketMsg_descriptor_ = file->message_type(0);
  static const int XSocketMsg_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_sendto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_send_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_recvfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_setsockopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_getsockopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_putchunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_requestchunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_getchunkstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_readchunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_removechunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_requestfailed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_changead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_readlocalhostaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_updatenameserverdag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_readnameserverdag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_isdualstackrouter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_getpeername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, x_getsockname_),
  };
  XSocketMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XSocketMsg_descriptor_,
      XSocketMsg::default_instance_,
      XSocketMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XSocketMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XSocketMsg));
  X_Socket_Msg_descriptor_ = file->message_type(1);
  static const int X_Socket_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Socket_Msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Socket_Msg, temp_),
  };
  X_Socket_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Socket_Msg_descriptor_,
      X_Socket_Msg::default_instance_,
      X_Socket_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Socket_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Socket_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Socket_Msg));
  X_Bind_Msg_descriptor_ = file->message_type(2);
  static const int X_Bind_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Bind_Msg, sdag_),
  };
  X_Bind_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Bind_Msg_descriptor_,
      X_Bind_Msg::default_instance_,
      X_Bind_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Bind_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Bind_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Bind_Msg));
  X_Close_Msg_descriptor_ = file->message_type(3);
  static const int X_Close_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Close_Msg, payload_),
  };
  X_Close_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Close_Msg_descriptor_,
      X_Close_Msg::default_instance_,
      X_Close_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Close_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Close_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Close_Msg));
  X_Connect_Msg_descriptor_ = file->message_type(4);
  static const int X_Connect_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Connect_Msg, ddag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Connect_Msg, status_),
  };
  X_Connect_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Connect_Msg_descriptor_,
      X_Connect_Msg::default_instance_,
      X_Connect_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Connect_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Connect_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Connect_Msg));
  X_Accept_Msg_descriptor_ = file->message_type(5);
  static const int X_Accept_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Accept_Msg, temp_),
  };
  X_Accept_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Accept_Msg_descriptor_,
      X_Accept_Msg::default_instance_,
      X_Accept_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Accept_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Accept_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Accept_Msg));
  X_Sendto_Msg_descriptor_ = file->message_type(6);
  static const int X_Sendto_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Sendto_Msg, ddag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Sendto_Msg, payload_),
  };
  X_Sendto_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Sendto_Msg_descriptor_,
      X_Sendto_Msg::default_instance_,
      X_Sendto_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Sendto_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Sendto_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Sendto_Msg));
  X_Send_Msg_descriptor_ = file->message_type(7);
  static const int X_Send_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Send_Msg, payload_),
  };
  X_Send_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Send_Msg_descriptor_,
      X_Send_Msg::default_instance_,
      X_Send_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Send_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Send_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Send_Msg));
  X_Recv_Msg_descriptor_ = file->message_type(8);
  static const int X_Recv_Msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recv_Msg, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recv_Msg, dag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recv_Msg, payload_),
  };
  X_Recv_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Recv_Msg_descriptor_,
      X_Recv_Msg::default_instance_,
      X_Recv_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recv_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recv_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Recv_Msg));
  X_Recvfrom_Msg_descriptor_ = file->message_type(9);
  static const int X_Recvfrom_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recvfrom_Msg, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recvfrom_Msg, payload_),
  };
  X_Recvfrom_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Recvfrom_Msg_descriptor_,
      X_Recvfrom_Msg::default_instance_,
      X_Recvfrom_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recvfrom_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Recvfrom_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Recvfrom_Msg));
  X_Setsockopt_Msg_descriptor_ = file->message_type(10);
  static const int X_Setsockopt_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Setsockopt_Msg, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Setsockopt_Msg, int_opt_),
  };
  X_Setsockopt_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Setsockopt_Msg_descriptor_,
      X_Setsockopt_Msg::default_instance_,
      X_Setsockopt_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Setsockopt_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Setsockopt_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Setsockopt_Msg));
  X_Getsockopt_Msg_descriptor_ = file->message_type(11);
  static const int X_Getsockopt_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getsockopt_Msg, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getsockopt_Msg, int_opt_),
  };
  X_Getsockopt_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Getsockopt_Msg_descriptor_,
      X_Getsockopt_Msg::default_instance_,
      X_Getsockopt_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getsockopt_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getsockopt_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Getsockopt_Msg));
  X_Putchunk_Msg_descriptor_ = file->message_type(12);
  static const int X_Putchunk_Msg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, cachepolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, cachesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, contextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, timestamp_),
  };
  X_Putchunk_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Putchunk_Msg_descriptor_,
      X_Putchunk_Msg::default_instance_,
      X_Putchunk_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Putchunk_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Putchunk_Msg));
  X_Requestchunk_Msg_descriptor_ = file->message_type(13);
  static const int X_Requestchunk_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Requestchunk_Msg, dag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Requestchunk_Msg, payload_),
  };
  X_Requestchunk_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Requestchunk_Msg_descriptor_,
      X_Requestchunk_Msg::default_instance_,
      X_Requestchunk_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Requestchunk_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Requestchunk_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Requestchunk_Msg));
  X_Getchunkstatus_Msg_descriptor_ = file->message_type(14);
  static const int X_Getchunkstatus_Msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getchunkstatus_Msg, dag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getchunkstatus_Msg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getchunkstatus_Msg, payload_),
  };
  X_Getchunkstatus_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Getchunkstatus_Msg_descriptor_,
      X_Getchunkstatus_Msg::default_instance_,
      X_Getchunkstatus_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getchunkstatus_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Getchunkstatus_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Getchunkstatus_Msg));
  X_Readchunk_Msg_descriptor_ = file->message_type(15);
  static const int X_Readchunk_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Readchunk_Msg, dag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Readchunk_Msg, payload_),
  };
  X_Readchunk_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Readchunk_Msg_descriptor_,
      X_Readchunk_Msg::default_instance_,
      X_Readchunk_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Readchunk_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Readchunk_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Readchunk_Msg));
  X_Removechunk_Msg_descriptor_ = file->message_type(16);
  static const int X_Removechunk_Msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Removechunk_Msg, contextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Removechunk_Msg, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Removechunk_Msg, status_),
  };
  X_Removechunk_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Removechunk_Msg_descriptor_,
      X_Removechunk_Msg::default_instance_,
      X_Removechunk_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Removechunk_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Removechunk_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Removechunk_Msg));
  X_Result_Msg_descriptor_ = file->message_type(17);
  static const int X_Result_Msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Result_Msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Result_Msg, return_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Result_Msg, err_code_),
  };
  X_Result_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Result_Msg_descriptor_,
      X_Result_Msg::default_instance_,
      X_Result_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Result_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Result_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Result_Msg));
  X_Requestfailed_Msg_descriptor_ = file->message_type(18);
  static const int X_Requestfailed_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Requestfailed_Msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Requestfailed_Msg, temp_),
  };
  X_Requestfailed_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Requestfailed_Msg_descriptor_,
      X_Requestfailed_Msg::default_instance_,
      X_Requestfailed_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Requestfailed_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Requestfailed_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Requestfailed_Msg));
  X_Changead_Msg_descriptor_ = file->message_type(19);
  static const int X_Changead_Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Changead_Msg, ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Changead_Msg, ip4id_),
  };
  X_Changead_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Changead_Msg_descriptor_,
      X_Changead_Msg::default_instance_,
      X_Changead_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Changead_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Changead_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Changead_Msg));
  X_ReadLocalHostAddr_Msg_descriptor_ = file->message_type(20);
  static const int X_ReadLocalHostAddr_Msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_ReadLocalHostAddr_Msg, ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_ReadLocalHostAddr_Msg, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_ReadLocalHostAddr_Msg, ip4id_),
  };
  X_ReadLocalHostAddr_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_ReadLocalHostAddr_Msg_descriptor_,
      X_ReadLocalHostAddr_Msg::default_instance_,
      X_ReadLocalHostAddr_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_ReadLocalHostAddr_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_ReadLocalHostAddr_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_ReadLocalHostAddr_Msg));
  X_Updatenameserverdag_Msg_descriptor_ = file->message_type(21);
  static const int X_Updatenameserverdag_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Updatenameserverdag_Msg, dag_),
  };
  X_Updatenameserverdag_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_Updatenameserverdag_Msg_descriptor_,
      X_Updatenameserverdag_Msg::default_instance_,
      X_Updatenameserverdag_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Updatenameserverdag_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_Updatenameserverdag_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_Updatenameserverdag_Msg));
  X_ReadNameServerDag_Msg_descriptor_ = file->message_type(22);
  static const int X_ReadNameServerDag_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_ReadNameServerDag_Msg, dag_),
  };
  X_ReadNameServerDag_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_ReadNameServerDag_Msg_descriptor_,
      X_ReadNameServerDag_Msg::default_instance_,
      X_ReadNameServerDag_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_ReadNameServerDag_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_ReadNameServerDag_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_ReadNameServerDag_Msg));
  X_IsDualStackRouter_Msg_descriptor_ = file->message_type(23);
  static const int X_IsDualStackRouter_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_IsDualStackRouter_Msg, flag_),
  };
  X_IsDualStackRouter_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_IsDualStackRouter_Msg_descriptor_,
      X_IsDualStackRouter_Msg::default_instance_,
      X_IsDualStackRouter_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_IsDualStackRouter_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_IsDualStackRouter_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_IsDualStackRouter_Msg));
  X_GetPeername_Msg_descriptor_ = file->message_type(24);
  static const int X_GetPeername_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_GetPeername_Msg, dag_),
  };
  X_GetPeername_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_GetPeername_Msg_descriptor_,
      X_GetPeername_Msg::default_instance_,
      X_GetPeername_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_GetPeername_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_GetPeername_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_GetPeername_Msg));
  X_GetSockname_Msg_descriptor_ = file->message_type(25);
  static const int X_GetSockname_Msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_GetSockname_Msg, dag_),
  };
  X_GetSockname_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      X_GetSockname_Msg_descriptor_,
      X_GetSockname_Msg::default_instance_,
      X_GetSockname_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_GetSockname_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_GetSockname_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(X_GetSockname_Msg));
  msg_descriptor_ = file->message_type(26);
  static const int msg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg, xiapath_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg, xiapath_dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg, type_),
  };
  msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_descriptor_,
      msg::default_instance_,
      msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg));
  msg_MsgType_descriptor_ = msg_descriptor_->enum_type(0);
  msg_response_descriptor_ = file->message_type(27);
  static const int msg_response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response, payload_),
  };
  msg_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_response_descriptor_,
      msg_response::default_instance_,
      msg_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_response));
  XSocketCallType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xia_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XSocketMsg_descriptor_, &XSocketMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Socket_Msg_descriptor_, &X_Socket_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Bind_Msg_descriptor_, &X_Bind_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Close_Msg_descriptor_, &X_Close_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Connect_Msg_descriptor_, &X_Connect_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Accept_Msg_descriptor_, &X_Accept_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Sendto_Msg_descriptor_, &X_Sendto_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Send_Msg_descriptor_, &X_Send_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Recv_Msg_descriptor_, &X_Recv_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Recvfrom_Msg_descriptor_, &X_Recvfrom_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Setsockopt_Msg_descriptor_, &X_Setsockopt_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Getsockopt_Msg_descriptor_, &X_Getsockopt_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Putchunk_Msg_descriptor_, &X_Putchunk_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Requestchunk_Msg_descriptor_, &X_Requestchunk_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Getchunkstatus_Msg_descriptor_, &X_Getchunkstatus_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Readchunk_Msg_descriptor_, &X_Readchunk_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Removechunk_Msg_descriptor_, &X_Removechunk_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Result_Msg_descriptor_, &X_Result_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Requestfailed_Msg_descriptor_, &X_Requestfailed_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Changead_Msg_descriptor_, &X_Changead_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_ReadLocalHostAddr_Msg_descriptor_, &X_ReadLocalHostAddr_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_Updatenameserverdag_Msg_descriptor_, &X_Updatenameserverdag_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_ReadNameServerDag_Msg_descriptor_, &X_ReadNameServerDag_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_IsDualStackRouter_Msg_descriptor_, &X_IsDualStackRouter_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_GetPeername_Msg_descriptor_, &X_GetPeername_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    X_GetSockname_Msg_descriptor_, &X_GetSockname_Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_descriptor_, &msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_response_descriptor_, &msg_response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xia_2eproto() {
  delete XSocketMsg::default_instance_;
  delete XSocketMsg_reflection_;
  delete X_Socket_Msg::default_instance_;
  delete X_Socket_Msg_reflection_;
  delete X_Bind_Msg::default_instance_;
  delete X_Bind_Msg_reflection_;
  delete X_Close_Msg::default_instance_;
  delete X_Close_Msg_reflection_;
  delete X_Connect_Msg::default_instance_;
  delete X_Connect_Msg_reflection_;
  delete X_Accept_Msg::default_instance_;
  delete X_Accept_Msg_reflection_;
  delete X_Sendto_Msg::default_instance_;
  delete X_Sendto_Msg_reflection_;
  delete X_Send_Msg::default_instance_;
  delete X_Send_Msg_reflection_;
  delete X_Recv_Msg::default_instance_;
  delete X_Recv_Msg_reflection_;
  delete X_Recvfrom_Msg::default_instance_;
  delete X_Recvfrom_Msg_reflection_;
  delete X_Setsockopt_Msg::default_instance_;
  delete X_Setsockopt_Msg_reflection_;
  delete X_Getsockopt_Msg::default_instance_;
  delete X_Getsockopt_Msg_reflection_;
  delete X_Putchunk_Msg::default_instance_;
  delete X_Putchunk_Msg_reflection_;
  delete X_Requestchunk_Msg::default_instance_;
  delete X_Requestchunk_Msg_reflection_;
  delete X_Getchunkstatus_Msg::default_instance_;
  delete X_Getchunkstatus_Msg_reflection_;
  delete X_Readchunk_Msg::default_instance_;
  delete X_Readchunk_Msg_reflection_;
  delete X_Removechunk_Msg::default_instance_;
  delete X_Removechunk_Msg_reflection_;
  delete X_Result_Msg::default_instance_;
  delete X_Result_Msg_reflection_;
  delete X_Requestfailed_Msg::default_instance_;
  delete X_Requestfailed_Msg_reflection_;
  delete X_Changead_Msg::default_instance_;
  delete X_Changead_Msg_reflection_;
  delete X_ReadLocalHostAddr_Msg::default_instance_;
  delete X_ReadLocalHostAddr_Msg_reflection_;
  delete X_Updatenameserverdag_Msg::default_instance_;
  delete X_Updatenameserverdag_Msg_reflection_;
  delete X_ReadNameServerDag_Msg::default_instance_;
  delete X_ReadNameServerDag_Msg_reflection_;
  delete X_IsDualStackRouter_Msg::default_instance_;
  delete X_IsDualStackRouter_Msg_reflection_;
  delete X_GetPeername_Msg::default_instance_;
  delete X_GetPeername_Msg_reflection_;
  delete X_GetSockname_Msg::default_instance_;
  delete X_GetSockname_Msg_reflection_;
  delete msg::default_instance_;
  delete msg_reflection_;
  delete msg_response::default_instance_;
  delete msg_response_reflection_;
}

void protobuf_AddDesc_xia_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\txia.proto\022\003xia\"\207\t\n\nXSocketMsg\022\"\n\004type\030"
    "\001 \002(\0162\024.xia.XSocketCallType\022#\n\010x_socket\030"
    "\002 \001(\0132\021.xia.X_Socket_Msg\022\037\n\006x_bind\030\003 \001(\013"
    "2\017.xia.X_Bind_Msg\022!\n\007x_close\030\004 \001(\0132\020.xia"
    ".X_Close_Msg\022%\n\tx_connect\030\005 \001(\0132\022.xia.X_"
    "Connect_Msg\022#\n\010x_accept\030\006 \001(\0132\021.xia.X_Ac"
    "cept_Msg\022#\n\010x_sendto\030\007 \001(\0132\021.xia.X_Sendt"
    "o_Msg\022\037\n\006x_send\030\010 \001(\0132\017.xia.X_Send_Msg\022\037"
    "\n\006x_recv\030\t \001(\0132\017.xia.X_Recv_Msg\022\'\n\nx_rec"
    "vfrom\030\n \001(\0132\023.xia.X_Recvfrom_Msg\022+\n\014x_se"
    "tsockopt\030\013 \001(\0132\025.xia.X_Setsockopt_Msg\022+\n"
    "\014x_getsockopt\030\014 \001(\0132\025.xia.X_Getsockopt_M"
    "sg\022\'\n\nx_putchunk\030\r \001(\0132\023.xia.X_Putchunk_"
    "Msg\022/\n\016x_requestchunk\030\016 \001(\0132\027.xia.X_Requ"
    "estchunk_Msg\0223\n\020x_getchunkstatus\030\017 \001(\0132\031"
    ".xia.X_Getchunkstatus_Msg\022)\n\013x_readchunk"
    "\030\020 \001(\0132\024.xia.X_Readchunk_Msg\022-\n\rx_remove"
    "chunk\030\021 \001(\0132\026.xia.X_Removechunk_Msg\0221\n\017x"
    "_requestfailed\030\022 \001(\0132\030.xia.X_Requestfail"
    "ed_Msg\022#\n\010x_result\030\023 \001(\0132\021.xia.X_Result_"
    "Msg\022\'\n\nx_changead\030\024 \001(\0132\023.xia.X_Changead"
    "_Msg\0229\n\023x_readlocalhostaddr\030\025 \001(\0132\034.xia."
    "X_ReadLocalHostAddr_Msg\022=\n\025x_updatenames"
    "erverdag\030\026 \001(\0132\036.xia.X_Updatenameserverd"
    "ag_Msg\0229\n\023x_readnameserverdag\030\027 \001(\0132\034.xi"
    "a.X_ReadNameServerDag_Msg\0229\n\023x_isdualsta"
    "ckrouter\030\030 \001(\0132\034.xia.X_IsDualStackRouter"
    "_Msg\022-\n\rx_getpeername\030\031 \001(\0132\026.xia.X_GetP"
    "eername_Msg\022-\n\rx_getsockname\030\032 \001(\0132\026.xia"
    ".X_GetSockname_Msg\"*\n\014X_Socket_Msg\022\014\n\004ty"
    "pe\030\001 \002(\005\022\014\n\004temp\030\002 \001(\t\"\032\n\nX_Bind_Msg\022\014\n\004"
    "sdag\030\001 \002(\t\"\036\n\013X_Close_Msg\022\017\n\007payload\030\001 \001"
    "(\014\"-\n\rX_Connect_Msg\022\014\n\004ddag\030\001 \002(\t\022\016\n\006sta"
    "tus\030\002 \001(\005\"\034\n\014X_Accept_Msg\022\014\n\004temp\030\001 \001(\t\""
    "-\n\014X_Sendto_Msg\022\014\n\004ddag\030\001 \002(\t\022\017\n\007payload"
    "\030\002 \002(\014\"\035\n\nX_Send_Msg\022\017\n\007payload\030\001 \002(\014\"8\n"
    "\nX_Recv_Msg\022\014\n\004temp\030\001 \001(\t\022\013\n\003dag\030\002 \001(\t\022\017"
    "\n\007payload\030\003 \001(\014\"/\n\016X_Recvfrom_Msg\022\014\n\004tem"
    "p\030\001 \001(\t\022\017\n\007payload\030\002 \001(\014\"5\n\020X_Setsockopt"
    "_Msg\022\020\n\010opt_type\030\001 \002(\005\022\017\n\007int_opt\030\002 \001(\005\""
    "5\n\020X_Getsockopt_Msg\022\020\n\010opt_type\030\001 \002(\005\022\017\n"
    "\007int_opt\030\002 \001(\005\"\231\001\n\016X_Putchunk_Msg\022\023\n\013cac"
    "hepolicy\030\001 \002(\005\022\021\n\tcachesize\030\002 \002(\005\022\021\n\tcon"
    "textid\030\003 \002(\005\022\013\n\003TTL\030\004 \002(\005\022\017\n\007payload\030\005 \002"
    "(\014\022\013\n\003cid\030\006 \001(\t\022\016\n\006length\030\007 \001(\005\022\021\n\ttimes"
    "tamp\030\010 \001(\003\"2\n\022X_Requestchunk_Msg\022\013\n\003dag\030"
    "\001 \003(\t\022\017\n\007payload\030\002 \001(\014\"D\n\024X_Getchunkstat"
    "us_Msg\022\013\n\003dag\030\001 \003(\t\022\016\n\006status\030\002 \003(\t\022\017\n\007p"
    "ayload\030\003 \001(\014\"/\n\017X_Readchunk_Msg\022\013\n\003dag\030\001"
    " \002(\t\022\017\n\007payload\030\002 \001(\014\"C\n\021X_Removechunk_M"
    "sg\022\021\n\tcontextid\030\001 \002(\005\022\013\n\003cid\030\002 \002(\t\022\016\n\006st"
    "atus\030\003 \001(\005\"Y\n\014X_Result_Msg\022\"\n\004type\030\001 \002(\016"
    "2\024.xia.XSocketCallType\022\023\n\013return_code\030\002 "
    "\002(\005\022\020\n\010err_code\030\003 \001(\005\"1\n\023X_Requestfailed"
    "_Msg\022\014\n\004type\030\001 \001(\005\022\014\n\004temp\030\002 \001(\t\"+\n\016X_Ch"
    "angead_Msg\022\n\n\002ad\030\001 \002(\t\022\r\n\005ip4id\030\002 \001(\t\"A\n"
    "\027X_ReadLocalHostAddr_Msg\022\n\n\002ad\030\001 \001(\t\022\013\n\003"
    "hid\030\002 \001(\t\022\r\n\005ip4id\030\003 \001(\t\"(\n\031X_Updatename"
    "serverdag_Msg\022\013\n\003dag\030\001 \002(\t\"&\n\027X_ReadName"
    "ServerDag_Msg\022\013\n\003dag\030\001 \001(\t\"\'\n\027X_IsDualSt"
    "ackRouter_Msg\022\014\n\004flag\030\001 \001(\005\" \n\021X_GetPeer"
    "name_Msg\022\013\n\003dag\030\001 \001(\t\" \n\021X_GetSockname_M"
    "sg\022\013\n\003dag\030\001 \001(\t\"\316\001\n\003msg\022\r\n\005appid\030\001 \001(\005\022\013"
    "\n\003xid\030\002 \001(\014\022\023\n\013xiapath_src\030\005 \001(\t\022\023\n\013xiap"
    "ath_dst\030\006 \001(\t\022\017\n\007payload\030\003 \001(\014\022\036\n\004type\030\004"
    " \001(\0162\020.xia.msg.MsgType\"P\n\007MsgType\022\017\n\013GET"
    "LOCALHID\020\000\022\n\n\006GETCID\020\001\022\016\n\nCONNECTSID\020\002\022\n"
    "\n\006PUTCID\020\003\022\014\n\010SERVESID\020\004\";\n\014msg_response"
    "\022\r\n\005appid\030\001 \002(\005\022\013\n\003xid\030\002 \003(\014\022\017\n\007payload\030"
    "\003 \001(\t*\263\003\n\017XSocketCallType\022\013\n\007XSOCKET\020\001\022\t"
    "\n\005XBIND\020\002\022\n\n\006XCLOSE\020\003\022\014\n\010XCONNECT\020\004\022\013\n\007X"
    "ACCEPT\020\005\022\013\n\007XSENDTO\020\006\022\t\n\005XSEND\020\007\022\t\n\005XREC"
    "V\020\010\022\r\n\tXRECVFROM\020\t\022\017\n\013XSETSOCKOPT\020\n\022\017\n\013X"
    "GETSOCKOPT\020\013\022\r\n\tXPUTCHUNK\020\014\022\021\n\rXREQUESTC"
    "HUNK\020\r\022\023\n\017XGETCHUNKSTATUS\020\016\022\016\n\nXREADCHUN"
    "K\020\017\022\020\n\014XREMOVECHUNK\020\020\022\022\n\016XREQUESTFAILED\020"
    "\021\022\013\n\007XRESULT\020\022\022\r\n\tXCHANGEAD\020\023\022\026\n\022XREADLO"
    "CALHOSTADDR\020\024\022\030\n\024XUPDATENAMESERVERDAG\020\025\022"
    "\026\n\022XREADNAMESERVERDAG\020\026\022\026\n\022XISDUALSTACKR"
    "OUTER\020\027\022\020\n\014XGETPEERNAME\020\030\022\020\n\014XGETSOCKNAM"
    "E\020\031", 3203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xia.proto", &protobuf_RegisterTypes);
  XSocketMsg::default_instance_ = new XSocketMsg();
  X_Socket_Msg::default_instance_ = new X_Socket_Msg();
  X_Bind_Msg::default_instance_ = new X_Bind_Msg();
  X_Close_Msg::default_instance_ = new X_Close_Msg();
  X_Connect_Msg::default_instance_ = new X_Connect_Msg();
  X_Accept_Msg::default_instance_ = new X_Accept_Msg();
  X_Sendto_Msg::default_instance_ = new X_Sendto_Msg();
  X_Send_Msg::default_instance_ = new X_Send_Msg();
  X_Recv_Msg::default_instance_ = new X_Recv_Msg();
  X_Recvfrom_Msg::default_instance_ = new X_Recvfrom_Msg();
  X_Setsockopt_Msg::default_instance_ = new X_Setsockopt_Msg();
  X_Getsockopt_Msg::default_instance_ = new X_Getsockopt_Msg();
  X_Putchunk_Msg::default_instance_ = new X_Putchunk_Msg();
  X_Requestchunk_Msg::default_instance_ = new X_Requestchunk_Msg();
  X_Getchunkstatus_Msg::default_instance_ = new X_Getchunkstatus_Msg();
  X_Readchunk_Msg::default_instance_ = new X_Readchunk_Msg();
  X_Removechunk_Msg::default_instance_ = new X_Removechunk_Msg();
  X_Result_Msg::default_instance_ = new X_Result_Msg();
  X_Requestfailed_Msg::default_instance_ = new X_Requestfailed_Msg();
  X_Changead_Msg::default_instance_ = new X_Changead_Msg();
  X_ReadLocalHostAddr_Msg::default_instance_ = new X_ReadLocalHostAddr_Msg();
  X_Updatenameserverdag_Msg::default_instance_ = new X_Updatenameserverdag_Msg();
  X_ReadNameServerDag_Msg::default_instance_ = new X_ReadNameServerDag_Msg();
  X_IsDualStackRouter_Msg::default_instance_ = new X_IsDualStackRouter_Msg();
  X_GetPeername_Msg::default_instance_ = new X_GetPeername_Msg();
  X_GetSockname_Msg::default_instance_ = new X_GetSockname_Msg();
  msg::default_instance_ = new msg();
  msg_response::default_instance_ = new msg_response();
  XSocketMsg::default_instance_->InitAsDefaultInstance();
  X_Socket_Msg::default_instance_->InitAsDefaultInstance();
  X_Bind_Msg::default_instance_->InitAsDefaultInstance();
  X_Close_Msg::default_instance_->InitAsDefaultInstance();
  X_Connect_Msg::default_instance_->InitAsDefaultInstance();
  X_Accept_Msg::default_instance_->InitAsDefaultInstance();
  X_Sendto_Msg::default_instance_->InitAsDefaultInstance();
  X_Send_Msg::default_instance_->InitAsDefaultInstance();
  X_Recv_Msg::default_instance_->InitAsDefaultInstance();
  X_Recvfrom_Msg::default_instance_->InitAsDefaultInstance();
  X_Setsockopt_Msg::default_instance_->InitAsDefaultInstance();
  X_Getsockopt_Msg::default_instance_->InitAsDefaultInstance();
  X_Putchunk_Msg::default_instance_->InitAsDefaultInstance();
  X_Requestchunk_Msg::default_instance_->InitAsDefaultInstance();
  X_Getchunkstatus_Msg::default_instance_->InitAsDefaultInstance();
  X_Readchunk_Msg::default_instance_->InitAsDefaultInstance();
  X_Removechunk_Msg::default_instance_->InitAsDefaultInstance();
  X_Result_Msg::default_instance_->InitAsDefaultInstance();
  X_Requestfailed_Msg::default_instance_->InitAsDefaultInstance();
  X_Changead_Msg::default_instance_->InitAsDefaultInstance();
  X_ReadLocalHostAddr_Msg::default_instance_->InitAsDefaultInstance();
  X_Updatenameserverdag_Msg::default_instance_->InitAsDefaultInstance();
  X_ReadNameServerDag_Msg::default_instance_->InitAsDefaultInstance();
  X_IsDualStackRouter_Msg::default_instance_->InitAsDefaultInstance();
  X_GetPeername_Msg::default_instance_->InitAsDefaultInstance();
  X_GetSockname_Msg::default_instance_->InitAsDefaultInstance();
  msg::default_instance_->InitAsDefaultInstance();
  msg_response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xia_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xia_2eproto {
  StaticDescriptorInitializer_xia_2eproto() {
    protobuf_AddDesc_xia_2eproto();
  }
} static_descriptor_initializer_xia_2eproto_;

const ::google::protobuf::EnumDescriptor* XSocketCallType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XSocketCallType_descriptor_;
}
bool XSocketCallType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int XSocketMsg::kTypeFieldNumber;
const int XSocketMsg::kXSocketFieldNumber;
const int XSocketMsg::kXBindFieldNumber;
const int XSocketMsg::kXCloseFieldNumber;
const int XSocketMsg::kXConnectFieldNumber;
const int XSocketMsg::kXAcceptFieldNumber;
const int XSocketMsg::kXSendtoFieldNumber;
const int XSocketMsg::kXSendFieldNumber;
const int XSocketMsg::kXRecvFieldNumber;
const int XSocketMsg::kXRecvfromFieldNumber;
const int XSocketMsg::kXSetsockoptFieldNumber;
const int XSocketMsg::kXGetsockoptFieldNumber;
const int XSocketMsg::kXPutchunkFieldNumber;
const int XSocketMsg::kXRequestchunkFieldNumber;
const int XSocketMsg::kXGetchunkstatusFieldNumber;
const int XSocketMsg::kXReadchunkFieldNumber;
const int XSocketMsg::kXRemovechunkFieldNumber;
const int XSocketMsg::kXRequestfailedFieldNumber;
const int XSocketMsg::kXResultFieldNumber;
const int XSocketMsg::kXChangeadFieldNumber;
const int XSocketMsg::kXReadlocalhostaddrFieldNumber;
const int XSocketMsg::kXUpdatenameserverdagFieldNumber;
const int XSocketMsg::kXReadnameserverdagFieldNumber;
const int XSocketMsg::kXIsdualstackrouterFieldNumber;
const int XSocketMsg::kXGetpeernameFieldNumber;
const int XSocketMsg::kXGetsocknameFieldNumber;
#endif  // !_MSC_VER

XSocketMsg::XSocketMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XSocketMsg::InitAsDefaultInstance() {
  x_socket_ = const_cast< ::xia::X_Socket_Msg*>(&::xia::X_Socket_Msg::default_instance());
  x_bind_ = const_cast< ::xia::X_Bind_Msg*>(&::xia::X_Bind_Msg::default_instance());
  x_close_ = const_cast< ::xia::X_Close_Msg*>(&::xia::X_Close_Msg::default_instance());
  x_connect_ = const_cast< ::xia::X_Connect_Msg*>(&::xia::X_Connect_Msg::default_instance());
  x_accept_ = const_cast< ::xia::X_Accept_Msg*>(&::xia::X_Accept_Msg::default_instance());
  x_sendto_ = const_cast< ::xia::X_Sendto_Msg*>(&::xia::X_Sendto_Msg::default_instance());
  x_send_ = const_cast< ::xia::X_Send_Msg*>(&::xia::X_Send_Msg::default_instance());
  x_recv_ = const_cast< ::xia::X_Recv_Msg*>(&::xia::X_Recv_Msg::default_instance());
  x_recvfrom_ = const_cast< ::xia::X_Recvfrom_Msg*>(&::xia::X_Recvfrom_Msg::default_instance());
  x_setsockopt_ = const_cast< ::xia::X_Setsockopt_Msg*>(&::xia::X_Setsockopt_Msg::default_instance());
  x_getsockopt_ = const_cast< ::xia::X_Getsockopt_Msg*>(&::xia::X_Getsockopt_Msg::default_instance());
  x_putchunk_ = const_cast< ::xia::X_Putchunk_Msg*>(&::xia::X_Putchunk_Msg::default_instance());
  x_requestchunk_ = const_cast< ::xia::X_Requestchunk_Msg*>(&::xia::X_Requestchunk_Msg::default_instance());
  x_getchunkstatus_ = const_cast< ::xia::X_Getchunkstatus_Msg*>(&::xia::X_Getchunkstatus_Msg::default_instance());
  x_readchunk_ = const_cast< ::xia::X_Readchunk_Msg*>(&::xia::X_Readchunk_Msg::default_instance());
  x_removechunk_ = const_cast< ::xia::X_Removechunk_Msg*>(&::xia::X_Removechunk_Msg::default_instance());
  x_requestfailed_ = const_cast< ::xia::X_Requestfailed_Msg*>(&::xia::X_Requestfailed_Msg::default_instance());
  x_result_ = const_cast< ::xia::X_Result_Msg*>(&::xia::X_Result_Msg::default_instance());
  x_changead_ = const_cast< ::xia::X_Changead_Msg*>(&::xia::X_Changead_Msg::default_instance());
  x_readlocalhostaddr_ = const_cast< ::xia::X_ReadLocalHostAddr_Msg*>(&::xia::X_ReadLocalHostAddr_Msg::default_instance());
  x_updatenameserverdag_ = const_cast< ::xia::X_Updatenameserverdag_Msg*>(&::xia::X_Updatenameserverdag_Msg::default_instance());
  x_readnameserverdag_ = const_cast< ::xia::X_ReadNameServerDag_Msg*>(&::xia::X_ReadNameServerDag_Msg::default_instance());
  x_isdualstackrouter_ = const_cast< ::xia::X_IsDualStackRouter_Msg*>(&::xia::X_IsDualStackRouter_Msg::default_instance());
  x_getpeername_ = const_cast< ::xia::X_GetPeername_Msg*>(&::xia::X_GetPeername_Msg::default_instance());
  x_getsockname_ = const_cast< ::xia::X_GetSockname_Msg*>(&::xia::X_GetSockname_Msg::default_instance());
}

XSocketMsg::XSocketMsg(const XSocketMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XSocketMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  x_socket_ = NULL;
  x_bind_ = NULL;
  x_close_ = NULL;
  x_connect_ = NULL;
  x_accept_ = NULL;
  x_sendto_ = NULL;
  x_send_ = NULL;
  x_recv_ = NULL;
  x_recvfrom_ = NULL;
  x_setsockopt_ = NULL;
  x_getsockopt_ = NULL;
  x_putchunk_ = NULL;
  x_requestchunk_ = NULL;
  x_getchunkstatus_ = NULL;
  x_readchunk_ = NULL;
  x_removechunk_ = NULL;
  x_requestfailed_ = NULL;
  x_result_ = NULL;
  x_changead_ = NULL;
  x_readlocalhostaddr_ = NULL;
  x_updatenameserverdag_ = NULL;
  x_readnameserverdag_ = NULL;
  x_isdualstackrouter_ = NULL;
  x_getpeername_ = NULL;
  x_getsockname_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XSocketMsg::~XSocketMsg() {
  SharedDtor();
}

void XSocketMsg::SharedDtor() {
  if (this != default_instance_) {
    delete x_socket_;
    delete x_bind_;
    delete x_close_;
    delete x_connect_;
    delete x_accept_;
    delete x_sendto_;
    delete x_send_;
    delete x_recv_;
    delete x_recvfrom_;
    delete x_setsockopt_;
    delete x_getsockopt_;
    delete x_putchunk_;
    delete x_requestchunk_;
    delete x_getchunkstatus_;
    delete x_readchunk_;
    delete x_removechunk_;
    delete x_requestfailed_;
    delete x_result_;
    delete x_changead_;
    delete x_readlocalhostaddr_;
    delete x_updatenameserverdag_;
    delete x_readnameserverdag_;
    delete x_isdualstackrouter_;
    delete x_getpeername_;
    delete x_getsockname_;
  }
}

void XSocketMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XSocketMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XSocketMsg_descriptor_;
}

const XSocketMsg& XSocketMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

XSocketMsg* XSocketMsg::default_instance_ = NULL;

XSocketMsg* XSocketMsg::New() const {
  return new XSocketMsg;
}

void XSocketMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_x_socket()) {
      if (x_socket_ != NULL) x_socket_->::xia::X_Socket_Msg::Clear();
    }
    if (has_x_bind()) {
      if (x_bind_ != NULL) x_bind_->::xia::X_Bind_Msg::Clear();
    }
    if (has_x_close()) {
      if (x_close_ != NULL) x_close_->::xia::X_Close_Msg::Clear();
    }
    if (has_x_connect()) {
      if (x_connect_ != NULL) x_connect_->::xia::X_Connect_Msg::Clear();
    }
    if (has_x_accept()) {
      if (x_accept_ != NULL) x_accept_->::xia::X_Accept_Msg::Clear();
    }
    if (has_x_sendto()) {
      if (x_sendto_ != NULL) x_sendto_->::xia::X_Sendto_Msg::Clear();
    }
    if (has_x_send()) {
      if (x_send_ != NULL) x_send_->::xia::X_Send_Msg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_x_recv()) {
      if (x_recv_ != NULL) x_recv_->::xia::X_Recv_Msg::Clear();
    }
    if (has_x_recvfrom()) {
      if (x_recvfrom_ != NULL) x_recvfrom_->::xia::X_Recvfrom_Msg::Clear();
    }
    if (has_x_setsockopt()) {
      if (x_setsockopt_ != NULL) x_setsockopt_->::xia::X_Setsockopt_Msg::Clear();
    }
    if (has_x_getsockopt()) {
      if (x_getsockopt_ != NULL) x_getsockopt_->::xia::X_Getsockopt_Msg::Clear();
    }
    if (has_x_putchunk()) {
      if (x_putchunk_ != NULL) x_putchunk_->::xia::X_Putchunk_Msg::Clear();
    }
    if (has_x_requestchunk()) {
      if (x_requestchunk_ != NULL) x_requestchunk_->::xia::X_Requestchunk_Msg::Clear();
    }
    if (has_x_getchunkstatus()) {
      if (x_getchunkstatus_ != NULL) x_getchunkstatus_->::xia::X_Getchunkstatus_Msg::Clear();
    }
    if (has_x_readchunk()) {
      if (x_readchunk_ != NULL) x_readchunk_->::xia::X_Readchunk_Msg::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_x_removechunk()) {
      if (x_removechunk_ != NULL) x_removechunk_->::xia::X_Removechunk_Msg::Clear();
    }
    if (has_x_requestfailed()) {
      if (x_requestfailed_ != NULL) x_requestfailed_->::xia::X_Requestfailed_Msg::Clear();
    }
    if (has_x_result()) {
      if (x_result_ != NULL) x_result_->::xia::X_Result_Msg::Clear();
    }
    if (has_x_changead()) {
      if (x_changead_ != NULL) x_changead_->::xia::X_Changead_Msg::Clear();
    }
    if (has_x_readlocalhostaddr()) {
      if (x_readlocalhostaddr_ != NULL) x_readlocalhostaddr_->::xia::X_ReadLocalHostAddr_Msg::Clear();
    }
    if (has_x_updatenameserverdag()) {
      if (x_updatenameserverdag_ != NULL) x_updatenameserverdag_->::xia::X_Updatenameserverdag_Msg::Clear();
    }
    if (has_x_readnameserverdag()) {
      if (x_readnameserverdag_ != NULL) x_readnameserverdag_->::xia::X_ReadNameServerDag_Msg::Clear();
    }
    if (has_x_isdualstackrouter()) {
      if (x_isdualstackrouter_ != NULL) x_isdualstackrouter_->::xia::X_IsDualStackRouter_Msg::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_x_getpeername()) {
      if (x_getpeername_ != NULL) x_getpeername_->::xia::X_GetPeername_Msg::Clear();
    }
    if (has_x_getsockname()) {
      if (x_getsockname_ != NULL) x_getsockname_->::xia::X_GetSockname_Msg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XSocketMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xia.XSocketCallType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (xia::XSocketCallType_IsValid(value)) {
            set_type(static_cast< xia::XSocketCallType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x_socket;
        break;
      }
      
      // optional .xia.X_Socket_Msg x_socket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_socket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_x_bind;
        break;
      }
      
      // optional .xia.X_Bind_Msg x_bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_bind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_bind()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_x_close;
        break;
      }
      
      // optional .xia.X_Close_Msg x_close = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_close:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_close()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_x_connect;
        break;
      }
      
      // optional .xia.X_Connect_Msg x_connect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_connect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_x_accept;
        break;
      }
      
      // optional .xia.X_Accept_Msg x_accept = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_accept:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_accept()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_x_sendto;
        break;
      }
      
      // optional .xia.X_Sendto_Msg x_sendto = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_sendto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_sendto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_x_send;
        break;
      }
      
      // optional .xia.X_Send_Msg x_send = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_send:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_send()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_x_recv;
        break;
      }
      
      // optional .xia.X_Recv_Msg x_recv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_recv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_recv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_x_recvfrom;
        break;
      }
      
      // optional .xia.X_Recvfrom_Msg x_recvfrom = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_recvfrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_recvfrom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_x_setsockopt;
        break;
      }
      
      // optional .xia.X_Setsockopt_Msg x_setsockopt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_setsockopt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_setsockopt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_x_getsockopt;
        break;
      }
      
      // optional .xia.X_Getsockopt_Msg x_getsockopt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_getsockopt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_getsockopt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_x_putchunk;
        break;
      }
      
      // optional .xia.X_Putchunk_Msg x_putchunk = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_putchunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_putchunk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_x_requestchunk;
        break;
      }
      
      // optional .xia.X_Requestchunk_Msg x_requestchunk = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_requestchunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_requestchunk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_x_getchunkstatus;
        break;
      }
      
      // optional .xia.X_Getchunkstatus_Msg x_getchunkstatus = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_getchunkstatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_getchunkstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_x_readchunk;
        break;
      }
      
      // optional .xia.X_Readchunk_Msg x_readchunk = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_readchunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_readchunk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_x_removechunk;
        break;
      }
      
      // optional .xia.X_Removechunk_Msg x_removechunk = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_removechunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_removechunk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_x_requestfailed;
        break;
      }
      
      // optional .xia.X_Requestfailed_Msg x_requestfailed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_requestfailed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_requestfailed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_x_result;
        break;
      }
      
      // optional .xia.X_Result_Msg x_result = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_x_changead;
        break;
      }
      
      // optional .xia.X_Changead_Msg x_changead = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_changead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_changead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_x_readlocalhostaddr;
        break;
      }
      
      // optional .xia.X_ReadLocalHostAddr_Msg x_readlocalhostaddr = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_readlocalhostaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_readlocalhostaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_x_updatenameserverdag;
        break;
      }
      
      // optional .xia.X_Updatenameserverdag_Msg x_updatenameserverdag = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_updatenameserverdag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_updatenameserverdag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_x_readnameserverdag;
        break;
      }
      
      // optional .xia.X_ReadNameServerDag_Msg x_readnameserverdag = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_readnameserverdag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_readnameserverdag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_x_isdualstackrouter;
        break;
      }
      
      // optional .xia.X_IsDualStackRouter_Msg x_isdualstackrouter = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_isdualstackrouter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_isdualstackrouter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_x_getpeername;
        break;
      }
      
      // optional .xia.X_GetPeername_Msg x_getpeername = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_getpeername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_getpeername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_x_getsockname;
        break;
      }
      
      // optional .xia.X_GetSockname_Msg x_getsockname = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_getsockname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_getsockname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XSocketMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xia.XSocketCallType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .xia.X_Socket_Msg x_socket = 2;
  if (has_x_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->x_socket(), output);
  }
  
  // optional .xia.X_Bind_Msg x_bind = 3;
  if (has_x_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->x_bind(), output);
  }
  
  // optional .xia.X_Close_Msg x_close = 4;
  if (has_x_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->x_close(), output);
  }
  
  // optional .xia.X_Connect_Msg x_connect = 5;
  if (has_x_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->x_connect(), output);
  }
  
  // optional .xia.X_Accept_Msg x_accept = 6;
  if (has_x_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->x_accept(), output);
  }
  
  // optional .xia.X_Sendto_Msg x_sendto = 7;
  if (has_x_sendto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->x_sendto(), output);
  }
  
  // optional .xia.X_Send_Msg x_send = 8;
  if (has_x_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->x_send(), output);
  }
  
  // optional .xia.X_Recv_Msg x_recv = 9;
  if (has_x_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->x_recv(), output);
  }
  
  // optional .xia.X_Recvfrom_Msg x_recvfrom = 10;
  if (has_x_recvfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->x_recvfrom(), output);
  }
  
  // optional .xia.X_Setsockopt_Msg x_setsockopt = 11;
  if (has_x_setsockopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->x_setsockopt(), output);
  }
  
  // optional .xia.X_Getsockopt_Msg x_getsockopt = 12;
  if (has_x_getsockopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->x_getsockopt(), output);
  }
  
  // optional .xia.X_Putchunk_Msg x_putchunk = 13;
  if (has_x_putchunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->x_putchunk(), output);
  }
  
  // optional .xia.X_Requestchunk_Msg x_requestchunk = 14;
  if (has_x_requestchunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->x_requestchunk(), output);
  }
  
  // optional .xia.X_Getchunkstatus_Msg x_getchunkstatus = 15;
  if (has_x_getchunkstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->x_getchunkstatus(), output);
  }
  
  // optional .xia.X_Readchunk_Msg x_readchunk = 16;
  if (has_x_readchunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->x_readchunk(), output);
  }
  
  // optional .xia.X_Removechunk_Msg x_removechunk = 17;
  if (has_x_removechunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->x_removechunk(), output);
  }
  
  // optional .xia.X_Requestfailed_Msg x_requestfailed = 18;
  if (has_x_requestfailed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->x_requestfailed(), output);
  }
  
  // optional .xia.X_Result_Msg x_result = 19;
  if (has_x_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->x_result(), output);
  }
  
  // optional .xia.X_Changead_Msg x_changead = 20;
  if (has_x_changead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->x_changead(), output);
  }
  
  // optional .xia.X_ReadLocalHostAddr_Msg x_readlocalhostaddr = 21;
  if (has_x_readlocalhostaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->x_readlocalhostaddr(), output);
  }
  
  // optional .xia.X_Updatenameserverdag_Msg x_updatenameserverdag = 22;
  if (has_x_updatenameserverdag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->x_updatenameserverdag(), output);
  }
  
  // optional .xia.X_ReadNameServerDag_Msg x_readnameserverdag = 23;
  if (has_x_readnameserverdag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->x_readnameserverdag(), output);
  }
  
  // optional .xia.X_IsDualStackRouter_Msg x_isdualstackrouter = 24;
  if (has_x_isdualstackrouter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->x_isdualstackrouter(), output);
  }
  
  // optional .xia.X_GetPeername_Msg x_getpeername = 25;
  if (has_x_getpeername()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->x_getpeername(), output);
  }
  
  // optional .xia.X_GetSockname_Msg x_getsockname = 26;
  if (has_x_getsockname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->x_getsockname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XSocketMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xia.XSocketCallType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .xia.X_Socket_Msg x_socket = 2;
  if (has_x_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->x_socket(), target);
  }
  
  // optional .xia.X_Bind_Msg x_bind = 3;
  if (has_x_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->x_bind(), target);
  }
  
  // optional .xia.X_Close_Msg x_close = 4;
  if (has_x_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->x_close(), target);
  }
  
  // optional .xia.X_Connect_Msg x_connect = 5;
  if (has_x_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->x_connect(), target);
  }
  
  // optional .xia.X_Accept_Msg x_accept = 6;
  if (has_x_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->x_accept(), target);
  }
  
  // optional .xia.X_Sendto_Msg x_sendto = 7;
  if (has_x_sendto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->x_sendto(), target);
  }
  
  // optional .xia.X_Send_Msg x_send = 8;
  if (has_x_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->x_send(), target);
  }
  
  // optional .xia.X_Recv_Msg x_recv = 9;
  if (has_x_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->x_recv(), target);
  }
  
  // optional .xia.X_Recvfrom_Msg x_recvfrom = 10;
  if (has_x_recvfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->x_recvfrom(), target);
  }
  
  // optional .xia.X_Setsockopt_Msg x_setsockopt = 11;
  if (has_x_setsockopt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->x_setsockopt(), target);
  }
  
  // optional .xia.X_Getsockopt_Msg x_getsockopt = 12;
  if (has_x_getsockopt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->x_getsockopt(), target);
  }
  
  // optional .xia.X_Putchunk_Msg x_putchunk = 13;
  if (has_x_putchunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->x_putchunk(), target);
  }
  
  // optional .xia.X_Requestchunk_Msg x_requestchunk = 14;
  if (has_x_requestchunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->x_requestchunk(), target);
  }
  
  // optional .xia.X_Getchunkstatus_Msg x_getchunkstatus = 15;
  if (has_x_getchunkstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->x_getchunkstatus(), target);
  }
  
  // optional .xia.X_Readchunk_Msg x_readchunk = 16;
  if (has_x_readchunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->x_readchunk(), target);
  }
  
  // optional .xia.X_Removechunk_Msg x_removechunk = 17;
  if (has_x_removechunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->x_removechunk(), target);
  }
  
  // optional .xia.X_Requestfailed_Msg x_requestfailed = 18;
  if (has_x_requestfailed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->x_requestfailed(), target);
  }
  
  // optional .xia.X_Result_Msg x_result = 19;
  if (has_x_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->x_result(), target);
  }
  
  // optional .xia.X_Changead_Msg x_changead = 20;
  if (has_x_changead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->x_changead(), target);
  }
  
  // optional .xia.X_ReadLocalHostAddr_Msg x_readlocalhostaddr = 21;
  if (has_x_readlocalhostaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->x_readlocalhostaddr(), target);
  }
  
  // optional .xia.X_Updatenameserverdag_Msg x_updatenameserverdag = 22;
  if (has_x_updatenameserverdag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->x_updatenameserverdag(), target);
  }
  
  // optional .xia.X_ReadNameServerDag_Msg x_readnameserverdag = 23;
  if (has_x_readnameserverdag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->x_readnameserverdag(), target);
  }
  
  // optional .xia.X_IsDualStackRouter_Msg x_isdualstackrouter = 24;
  if (has_x_isdualstackrouter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->x_isdualstackrouter(), target);
  }
  
  // optional .xia.X_GetPeername_Msg x_getpeername = 25;
  if (has_x_getpeername()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->x_getpeername(), target);
  }
  
  // optional .xia.X_GetSockname_Msg x_getsockname = 26;
  if (has_x_getsockname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->x_getsockname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XSocketMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xia.XSocketCallType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .xia.X_Socket_Msg x_socket = 2;
    if (has_x_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_socket());
    }
    
    // optional .xia.X_Bind_Msg x_bind = 3;
    if (has_x_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_bind());
    }
    
    // optional .xia.X_Close_Msg x_close = 4;
    if (has_x_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_close());
    }
    
    // optional .xia.X_Connect_Msg x_connect = 5;
    if (has_x_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_connect());
    }
    
    // optional .xia.X_Accept_Msg x_accept = 6;
    if (has_x_accept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_accept());
    }
    
    // optional .xia.X_Sendto_Msg x_sendto = 7;
    if (has_x_sendto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_sendto());
    }
    
    // optional .xia.X_Send_Msg x_send = 8;
    if (has_x_send()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_send());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .xia.X_Recv_Msg x_recv = 9;
    if (has_x_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_recv());
    }
    
    // optional .xia.X_Recvfrom_Msg x_recvfrom = 10;
    if (has_x_recvfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_recvfrom());
    }
    
    // optional .xia.X_Setsockopt_Msg x_setsockopt = 11;
    if (has_x_setsockopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_setsockopt());
    }
    
    // optional .xia.X_Getsockopt_Msg x_getsockopt = 12;
    if (has_x_getsockopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_getsockopt());
    }
    
    // optional .xia.X_Putchunk_Msg x_putchunk = 13;
    if (has_x_putchunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_putchunk());
    }
    
    // optional .xia.X_Requestchunk_Msg x_requestchunk = 14;
    if (has_x_requestchunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_requestchunk());
    }
    
    // optional .xia.X_Getchunkstatus_Msg x_getchunkstatus = 15;
    if (has_x_getchunkstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_getchunkstatus());
    }
    
    // optional .xia.X_Readchunk_Msg x_readchunk = 16;
    if (has_x_readchunk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_readchunk());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .xia.X_Removechunk_Msg x_removechunk = 17;
    if (has_x_removechunk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_removechunk());
    }
    
    // optional .xia.X_Requestfailed_Msg x_requestfailed = 18;
    if (has_x_requestfailed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_requestfailed());
    }
    
    // optional .xia.X_Result_Msg x_result = 19;
    if (has_x_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_result());
    }
    
    // optional .xia.X_Changead_Msg x_changead = 20;
    if (has_x_changead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_changead());
    }
    
    // optional .xia.X_ReadLocalHostAddr_Msg x_readlocalhostaddr = 21;
    if (has_x_readlocalhostaddr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_readlocalhostaddr());
    }
    
    // optional .xia.X_Updatenameserverdag_Msg x_updatenameserverdag = 22;
    if (has_x_updatenameserverdag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_updatenameserverdag());
    }
    
    // optional .xia.X_ReadNameServerDag_Msg x_readnameserverdag = 23;
    if (has_x_readnameserverdag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_readnameserverdag());
    }
    
    // optional .xia.X_IsDualStackRouter_Msg x_isdualstackrouter = 24;
    if (has_x_isdualstackrouter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_isdualstackrouter());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .xia.X_GetPeername_Msg x_getpeername = 25;
    if (has_x_getpeername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_getpeername());
    }
    
    // optional .xia.X_GetSockname_Msg x_getsockname = 26;
    if (has_x_getsockname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x_getsockname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XSocketMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XSocketMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XSocketMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XSocketMsg::MergeFrom(const XSocketMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x_socket()) {
      mutable_x_socket()->::xia::X_Socket_Msg::MergeFrom(from.x_socket());
    }
    if (from.has_x_bind()) {
      mutable_x_bind()->::xia::X_Bind_Msg::MergeFrom(from.x_bind());
    }
    if (from.has_x_close()) {
      mutable_x_close()->::xia::X_Close_Msg::MergeFrom(from.x_close());
    }
    if (from.has_x_connect()) {
      mutable_x_connect()->::xia::X_Connect_Msg::MergeFrom(from.x_connect());
    }
    if (from.has_x_accept()) {
      mutable_x_accept()->::xia::X_Accept_Msg::MergeFrom(from.x_accept());
    }
    if (from.has_x_sendto()) {
      mutable_x_sendto()->::xia::X_Sendto_Msg::MergeFrom(from.x_sendto());
    }
    if (from.has_x_send()) {
      mutable_x_send()->::xia::X_Send_Msg::MergeFrom(from.x_send());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_x_recv()) {
      mutable_x_recv()->::xia::X_Recv_Msg::MergeFrom(from.x_recv());
    }
    if (from.has_x_recvfrom()) {
      mutable_x_recvfrom()->::xia::X_Recvfrom_Msg::MergeFrom(from.x_recvfrom());
    }
    if (from.has_x_setsockopt()) {
      mutable_x_setsockopt()->::xia::X_Setsockopt_Msg::MergeFrom(from.x_setsockopt());
    }
    if (from.has_x_getsockopt()) {
      mutable_x_getsockopt()->::xia::X_Getsockopt_Msg::MergeFrom(from.x_getsockopt());
    }
    if (from.has_x_putchunk()) {
      mutable_x_putchunk()->::xia::X_Putchunk_Msg::MergeFrom(from.x_putchunk());
    }
    if (from.has_x_requestchunk()) {
      mutable_x_requestchunk()->::xia::X_Requestchunk_Msg::MergeFrom(from.x_requestchunk());
    }
    if (from.has_x_getchunkstatus()) {
      mutable_x_getchunkstatus()->::xia::X_Getchunkstatus_Msg::MergeFrom(from.x_getchunkstatus());
    }
    if (from.has_x_readchunk()) {
      mutable_x_readchunk()->::xia::X_Readchunk_Msg::MergeFrom(from.x_readchunk());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_x_removechunk()) {
      mutable_x_removechunk()->::xia::X_Removechunk_Msg::MergeFrom(from.x_removechunk());
    }
    if (from.has_x_requestfailed()) {
      mutable_x_requestfailed()->::xia::X_Requestfailed_Msg::MergeFrom(from.x_requestfailed());
    }
    if (from.has_x_result()) {
      mutable_x_result()->::xia::X_Result_Msg::MergeFrom(from.x_result());
    }
    if (from.has_x_changead()) {
      mutable_x_changead()->::xia::X_Changead_Msg::MergeFrom(from.x_changead());
    }
    if (from.has_x_readlocalhostaddr()) {
      mutable_x_readlocalhostaddr()->::xia::X_ReadLocalHostAddr_Msg::MergeFrom(from.x_readlocalhostaddr());
    }
    if (from.has_x_updatenameserverdag()) {
      mutable_x_updatenameserverdag()->::xia::X_Updatenameserverdag_Msg::MergeFrom(from.x_updatenameserverdag());
    }
    if (from.has_x_readnameserverdag()) {
      mutable_x_readnameserverdag()->::xia::X_ReadNameServerDag_Msg::MergeFrom(from.x_readnameserverdag());
    }
    if (from.has_x_isdualstackrouter()) {
      mutable_x_isdualstackrouter()->::xia::X_IsDualStackRouter_Msg::MergeFrom(from.x_isdualstackrouter());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_x_getpeername()) {
      mutable_x_getpeername()->::xia::X_GetPeername_Msg::MergeFrom(from.x_getpeername());
    }
    if (from.has_x_getsockname()) {
      mutable_x_getsockname()->::xia::X_GetSockname_Msg::MergeFrom(from.x_getsockname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XSocketMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XSocketMsg::CopyFrom(const XSocketMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XSocketMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_x_socket()) {
    if (!this->x_socket().IsInitialized()) return false;
  }
  if (has_x_bind()) {
    if (!this->x_bind().IsInitialized()) return false;
  }
  if (has_x_connect()) {
    if (!this->x_connect().IsInitialized()) return false;
  }
  if (has_x_sendto()) {
    if (!this->x_sendto().IsInitialized()) return false;
  }
  if (has_x_send()) {
    if (!this->x_send().IsInitialized()) return false;
  }
  if (has_x_setsockopt()) {
    if (!this->x_setsockopt().IsInitialized()) return false;
  }
  if (has_x_getsockopt()) {
    if (!this->x_getsockopt().IsInitialized()) return false;
  }
  if (has_x_putchunk()) {
    if (!this->x_putchunk().IsInitialized()) return false;
  }
  if (has_x_readchunk()) {
    if (!this->x_readchunk().IsInitialized()) return false;
  }
  if (has_x_removechunk()) {
    if (!this->x_removechunk().IsInitialized()) return false;
  }
  if (has_x_result()) {
    if (!this->x_result().IsInitialized()) return false;
  }
  if (has_x_changead()) {
    if (!this->x_changead().IsInitialized()) return false;
  }
  if (has_x_updatenameserverdag()) {
    if (!this->x_updatenameserverdag().IsInitialized()) return false;
  }
  return true;
}

void XSocketMsg::Swap(XSocketMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(x_socket_, other->x_socket_);
    std::swap(x_bind_, other->x_bind_);
    std::swap(x_close_, other->x_close_);
    std::swap(x_connect_, other->x_connect_);
    std::swap(x_accept_, other->x_accept_);
    std::swap(x_sendto_, other->x_sendto_);
    std::swap(x_send_, other->x_send_);
    std::swap(x_recv_, other->x_recv_);
    std::swap(x_recvfrom_, other->x_recvfrom_);
    std::swap(x_setsockopt_, other->x_setsockopt_);
    std::swap(x_getsockopt_, other->x_getsockopt_);
    std::swap(x_putchunk_, other->x_putchunk_);
    std::swap(x_requestchunk_, other->x_requestchunk_);
    std::swap(x_getchunkstatus_, other->x_getchunkstatus_);
    std::swap(x_readchunk_, other->x_readchunk_);
    std::swap(x_removechunk_, other->x_removechunk_);
    std::swap(x_requestfailed_, other->x_requestfailed_);
    std::swap(x_result_, other->x_result_);
    std::swap(x_changead_, other->x_changead_);
    std::swap(x_readlocalhostaddr_, other->x_readlocalhostaddr_);
    std::swap(x_updatenameserverdag_, other->x_updatenameserverdag_);
    std::swap(x_readnameserverdag_, other->x_readnameserverdag_);
    std::swap(x_isdualstackrouter_, other->x_isdualstackrouter_);
    std::swap(x_getpeername_, other->x_getpeername_);
    std::swap(x_getsockname_, other->x_getsockname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XSocketMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XSocketMsg_descriptor_;
  metadata.reflection = XSocketMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Socket_Msg::kTypeFieldNumber;
const int X_Socket_Msg::kTempFieldNumber;
#endif  // !_MSC_VER

X_Socket_Msg::X_Socket_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Socket_Msg::InitAsDefaultInstance() {
}

X_Socket_Msg::X_Socket_Msg(const X_Socket_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Socket_Msg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  temp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Socket_Msg::~X_Socket_Msg() {
  SharedDtor();
}

void X_Socket_Msg::SharedDtor() {
  if (temp_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_;
  }
  if (this != default_instance_) {
  }
}

void X_Socket_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Socket_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Socket_Msg_descriptor_;
}

const X_Socket_Msg& X_Socket_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Socket_Msg* X_Socket_Msg::default_instance_ = NULL;

X_Socket_Msg* X_Socket_Msg::New() const {
  return new X_Socket_Msg;
}

void X_Socket_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_temp()) {
      if (temp_ != &::google::protobuf::internal::kEmptyString) {
        temp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Socket_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_temp;
        break;
      }
      
      // optional string temp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->temp().data(), this->temp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Socket_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string temp = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->temp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Socket_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string temp = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->temp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Socket_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string temp = 2;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->temp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Socket_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Socket_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Socket_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Socket_Msg::MergeFrom(const X_Socket_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Socket_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Socket_Msg::CopyFrom(const X_Socket_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Socket_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Socket_Msg::Swap(X_Socket_Msg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(temp_, other->temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Socket_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Socket_Msg_descriptor_;
  metadata.reflection = X_Socket_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Bind_Msg::kSdagFieldNumber;
#endif  // !_MSC_VER

X_Bind_Msg::X_Bind_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Bind_Msg::InitAsDefaultInstance() {
}

X_Bind_Msg::X_Bind_Msg(const X_Bind_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Bind_Msg::SharedCtor() {
  _cached_size_ = 0;
  sdag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Bind_Msg::~X_Bind_Msg() {
  SharedDtor();
}

void X_Bind_Msg::SharedDtor() {
  if (sdag_ != &::google::protobuf::internal::kEmptyString) {
    delete sdag_;
  }
  if (this != default_instance_) {
  }
}

void X_Bind_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Bind_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Bind_Msg_descriptor_;
}

const X_Bind_Msg& X_Bind_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Bind_Msg* X_Bind_Msg::default_instance_ = NULL;

X_Bind_Msg* X_Bind_Msg::New() const {
  return new X_Bind_Msg;
}

void X_Bind_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sdag()) {
      if (sdag_ != &::google::protobuf::internal::kEmptyString) {
        sdag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Bind_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sdag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdag().data(), this->sdag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Bind_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sdag = 1;
  if (has_sdag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdag().data(), this->sdag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sdag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Bind_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sdag = 1;
  if (has_sdag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdag().data(), this->sdag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sdag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Bind_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sdag = 1;
    if (has_sdag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Bind_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Bind_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Bind_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Bind_Msg::MergeFrom(const X_Bind_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sdag()) {
      set_sdag(from.sdag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Bind_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Bind_Msg::CopyFrom(const X_Bind_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Bind_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Bind_Msg::Swap(X_Bind_Msg* other) {
  if (other != this) {
    std::swap(sdag_, other->sdag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Bind_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Bind_Msg_descriptor_;
  metadata.reflection = X_Bind_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Close_Msg::kPayloadFieldNumber;
#endif  // !_MSC_VER

X_Close_Msg::X_Close_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Close_Msg::InitAsDefaultInstance() {
}

X_Close_Msg::X_Close_Msg(const X_Close_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Close_Msg::SharedCtor() {
  _cached_size_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Close_Msg::~X_Close_Msg() {
  SharedDtor();
}

void X_Close_Msg::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void X_Close_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Close_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Close_Msg_descriptor_;
}

const X_Close_Msg& X_Close_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Close_Msg* X_Close_Msg::default_instance_ = NULL;

X_Close_Msg* X_Close_Msg::New() const {
  return new X_Close_Msg;
}

void X_Close_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Close_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes payload = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Close_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Close_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes payload = 1;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Close_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes payload = 1;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Close_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Close_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Close_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Close_Msg::MergeFrom(const X_Close_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Close_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Close_Msg::CopyFrom(const X_Close_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Close_Msg::IsInitialized() const {
  
  return true;
}

void X_Close_Msg::Swap(X_Close_Msg* other) {
  if (other != this) {
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Close_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Close_Msg_descriptor_;
  metadata.reflection = X_Close_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Connect_Msg::kDdagFieldNumber;
const int X_Connect_Msg::kStatusFieldNumber;
#endif  // !_MSC_VER

X_Connect_Msg::X_Connect_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Connect_Msg::InitAsDefaultInstance() {
}

X_Connect_Msg::X_Connect_Msg(const X_Connect_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Connect_Msg::SharedCtor() {
  _cached_size_ = 0;
  ddag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Connect_Msg::~X_Connect_Msg() {
  SharedDtor();
}

void X_Connect_Msg::SharedDtor() {
  if (ddag_ != &::google::protobuf::internal::kEmptyString) {
    delete ddag_;
  }
  if (this != default_instance_) {
  }
}

void X_Connect_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Connect_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Connect_Msg_descriptor_;
}

const X_Connect_Msg& X_Connect_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Connect_Msg* X_Connect_Msg::default_instance_ = NULL;

X_Connect_Msg* X_Connect_Msg::New() const {
  return new X_Connect_Msg;
}

void X_Connect_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ddag()) {
      if (ddag_ != &::google::protobuf::internal::kEmptyString) {
        ddag_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Connect_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ddag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ddag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ddag().data(), this->ddag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Connect_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ddag = 1;
  if (has_ddag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ddag().data(), this->ddag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ddag(), output);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Connect_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ddag = 1;
  if (has_ddag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ddag().data(), this->ddag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ddag(), target);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Connect_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ddag = 1;
    if (has_ddag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ddag());
    }
    
    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Connect_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Connect_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Connect_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Connect_Msg::MergeFrom(const X_Connect_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ddag()) {
      set_ddag(from.ddag());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Connect_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Connect_Msg::CopyFrom(const X_Connect_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Connect_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Connect_Msg::Swap(X_Connect_Msg* other) {
  if (other != this) {
    std::swap(ddag_, other->ddag_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Connect_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Connect_Msg_descriptor_;
  metadata.reflection = X_Connect_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Accept_Msg::kTempFieldNumber;
#endif  // !_MSC_VER

X_Accept_Msg::X_Accept_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Accept_Msg::InitAsDefaultInstance() {
}

X_Accept_Msg::X_Accept_Msg(const X_Accept_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Accept_Msg::SharedCtor() {
  _cached_size_ = 0;
  temp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Accept_Msg::~X_Accept_Msg() {
  SharedDtor();
}

void X_Accept_Msg::SharedDtor() {
  if (temp_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_;
  }
  if (this != default_instance_) {
  }
}

void X_Accept_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Accept_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Accept_Msg_descriptor_;
}

const X_Accept_Msg& X_Accept_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Accept_Msg* X_Accept_Msg::default_instance_ = NULL;

X_Accept_Msg* X_Accept_Msg::New() const {
  return new X_Accept_Msg;
}

void X_Accept_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_temp()) {
      if (temp_ != &::google::protobuf::internal::kEmptyString) {
        temp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Accept_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string temp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->temp().data(), this->temp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Accept_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string temp = 1;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->temp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Accept_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string temp = 1;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->temp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Accept_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string temp = 1;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->temp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Accept_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Accept_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Accept_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Accept_Msg::MergeFrom(const X_Accept_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temp()) {
      set_temp(from.temp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Accept_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Accept_Msg::CopyFrom(const X_Accept_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Accept_Msg::IsInitialized() const {
  
  return true;
}

void X_Accept_Msg::Swap(X_Accept_Msg* other) {
  if (other != this) {
    std::swap(temp_, other->temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Accept_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Accept_Msg_descriptor_;
  metadata.reflection = X_Accept_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Sendto_Msg::kDdagFieldNumber;
const int X_Sendto_Msg::kPayloadFieldNumber;
#endif  // !_MSC_VER

X_Sendto_Msg::X_Sendto_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Sendto_Msg::InitAsDefaultInstance() {
}

X_Sendto_Msg::X_Sendto_Msg(const X_Sendto_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Sendto_Msg::SharedCtor() {
  _cached_size_ = 0;
  ddag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Sendto_Msg::~X_Sendto_Msg() {
  SharedDtor();
}

void X_Sendto_Msg::SharedDtor() {
  if (ddag_ != &::google::protobuf::internal::kEmptyString) {
    delete ddag_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void X_Sendto_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Sendto_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Sendto_Msg_descriptor_;
}

const X_Sendto_Msg& X_Sendto_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Sendto_Msg* X_Sendto_Msg::default_instance_ = NULL;

X_Sendto_Msg* X_Sendto_Msg::New() const {
  return new X_Sendto_Msg;
}

void X_Sendto_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ddag()) {
      if (ddag_ != &::google::protobuf::internal::kEmptyString) {
        ddag_->clear();
      }
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Sendto_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ddag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ddag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ddag().data(), this->ddag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Sendto_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ddag = 1;
  if (has_ddag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ddag().data(), this->ddag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ddag(), output);
  }
  
  // required bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Sendto_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ddag = 1;
  if (has_ddag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ddag().data(), this->ddag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ddag(), target);
  }
  
  // required bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Sendto_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ddag = 1;
    if (has_ddag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ddag());
    }
    
    // required bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Sendto_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Sendto_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Sendto_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Sendto_Msg::MergeFrom(const X_Sendto_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ddag()) {
      set_ddag(from.ddag());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Sendto_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Sendto_Msg::CopyFrom(const X_Sendto_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Sendto_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void X_Sendto_Msg::Swap(X_Sendto_Msg* other) {
  if (other != this) {
    std::swap(ddag_, other->ddag_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Sendto_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Sendto_Msg_descriptor_;
  metadata.reflection = X_Sendto_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Send_Msg::kPayloadFieldNumber;
#endif  // !_MSC_VER

X_Send_Msg::X_Send_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Send_Msg::InitAsDefaultInstance() {
}

X_Send_Msg::X_Send_Msg(const X_Send_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Send_Msg::SharedCtor() {
  _cached_size_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Send_Msg::~X_Send_Msg() {
  SharedDtor();
}

void X_Send_Msg::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void X_Send_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Send_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Send_Msg_descriptor_;
}

const X_Send_Msg& X_Send_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Send_Msg* X_Send_Msg::default_instance_ = NULL;

X_Send_Msg* X_Send_Msg::New() const {
  return new X_Send_Msg;
}

void X_Send_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Send_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes payload = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Send_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Send_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes payload = 1;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Send_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes payload = 1;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Send_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Send_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Send_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Send_Msg::MergeFrom(const X_Send_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Send_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Send_Msg::CopyFrom(const X_Send_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Send_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Send_Msg::Swap(X_Send_Msg* other) {
  if (other != this) {
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Send_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Send_Msg_descriptor_;
  metadata.reflection = X_Send_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Recv_Msg::kTempFieldNumber;
const int X_Recv_Msg::kDagFieldNumber;
const int X_Recv_Msg::kPayloadFieldNumber;
#endif  // !_MSC_VER

X_Recv_Msg::X_Recv_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Recv_Msg::InitAsDefaultInstance() {
}

X_Recv_Msg::X_Recv_Msg(const X_Recv_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Recv_Msg::SharedCtor() {
  _cached_size_ = 0;
  temp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Recv_Msg::~X_Recv_Msg() {
  SharedDtor();
}

void X_Recv_Msg::SharedDtor() {
  if (temp_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_;
  }
  if (dag_ != &::google::protobuf::internal::kEmptyString) {
    delete dag_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void X_Recv_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Recv_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Recv_Msg_descriptor_;
}

const X_Recv_Msg& X_Recv_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Recv_Msg* X_Recv_Msg::default_instance_ = NULL;

X_Recv_Msg* X_Recv_Msg::New() const {
  return new X_Recv_Msg;
}

void X_Recv_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_temp()) {
      if (temp_ != &::google::protobuf::internal::kEmptyString) {
        temp_->clear();
      }
    }
    if (has_dag()) {
      if (dag_ != &::google::protobuf::internal::kEmptyString) {
        dag_->clear();
      }
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Recv_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string temp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->temp().data(), this->temp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dag;
        break;
      }
      
      // optional string dag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dag().data(), this->dag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Recv_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string temp = 1;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->temp(), output);
  }
  
  // optional string dag = 2;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dag(), output);
  }
  
  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Recv_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string temp = 1;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->temp(), target);
  }
  
  // optional string dag = 2;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dag(), target);
  }
  
  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Recv_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string temp = 1;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->temp());
    }
    
    // optional string dag = 2;
    if (has_dag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dag());
    }
    
    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Recv_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Recv_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Recv_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Recv_Msg::MergeFrom(const X_Recv_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_dag()) {
      set_dag(from.dag());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Recv_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Recv_Msg::CopyFrom(const X_Recv_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Recv_Msg::IsInitialized() const {
  
  return true;
}

void X_Recv_Msg::Swap(X_Recv_Msg* other) {
  if (other != this) {
    std::swap(temp_, other->temp_);
    std::swap(dag_, other->dag_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Recv_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Recv_Msg_descriptor_;
  metadata.reflection = X_Recv_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Recvfrom_Msg::kTempFieldNumber;
const int X_Recvfrom_Msg::kPayloadFieldNumber;
#endif  // !_MSC_VER

X_Recvfrom_Msg::X_Recvfrom_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Recvfrom_Msg::InitAsDefaultInstance() {
}

X_Recvfrom_Msg::X_Recvfrom_Msg(const X_Recvfrom_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Recvfrom_Msg::SharedCtor() {
  _cached_size_ = 0;
  temp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Recvfrom_Msg::~X_Recvfrom_Msg() {
  SharedDtor();
}

void X_Recvfrom_Msg::SharedDtor() {
  if (temp_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void X_Recvfrom_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Recvfrom_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Recvfrom_Msg_descriptor_;
}

const X_Recvfrom_Msg& X_Recvfrom_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Recvfrom_Msg* X_Recvfrom_Msg::default_instance_ = NULL;

X_Recvfrom_Msg* X_Recvfrom_Msg::New() const {
  return new X_Recvfrom_Msg;
}

void X_Recvfrom_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_temp()) {
      if (temp_ != &::google::protobuf::internal::kEmptyString) {
        temp_->clear();
      }
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Recvfrom_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string temp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->temp().data(), this->temp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Recvfrom_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string temp = 1;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->temp(), output);
  }
  
  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Recvfrom_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string temp = 1;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->temp(), target);
  }
  
  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Recvfrom_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string temp = 1;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->temp());
    }
    
    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Recvfrom_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Recvfrom_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Recvfrom_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Recvfrom_Msg::MergeFrom(const X_Recvfrom_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Recvfrom_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Recvfrom_Msg::CopyFrom(const X_Recvfrom_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Recvfrom_Msg::IsInitialized() const {
  
  return true;
}

void X_Recvfrom_Msg::Swap(X_Recvfrom_Msg* other) {
  if (other != this) {
    std::swap(temp_, other->temp_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Recvfrom_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Recvfrom_Msg_descriptor_;
  metadata.reflection = X_Recvfrom_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Setsockopt_Msg::kOptTypeFieldNumber;
const int X_Setsockopt_Msg::kIntOptFieldNumber;
#endif  // !_MSC_VER

X_Setsockopt_Msg::X_Setsockopt_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Setsockopt_Msg::InitAsDefaultInstance() {
}

X_Setsockopt_Msg::X_Setsockopt_Msg(const X_Setsockopt_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Setsockopt_Msg::SharedCtor() {
  _cached_size_ = 0;
  opt_type_ = 0;
  int_opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Setsockopt_Msg::~X_Setsockopt_Msg() {
  SharedDtor();
}

void X_Setsockopt_Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void X_Setsockopt_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Setsockopt_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Setsockopt_Msg_descriptor_;
}

const X_Setsockopt_Msg& X_Setsockopt_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Setsockopt_Msg* X_Setsockopt_Msg::default_instance_ = NULL;

X_Setsockopt_Msg* X_Setsockopt_Msg::New() const {
  return new X_Setsockopt_Msg;
}

void X_Setsockopt_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_type_ = 0;
    int_opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Setsockopt_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opt_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_opt;
        break;
      }
      
      // optional int32 int_opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_opt_)));
          set_has_int_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Setsockopt_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opt_type = 1;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt_type(), output);
  }
  
  // optional int32 int_opt = 2;
  if (has_int_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_opt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Setsockopt_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opt_type = 1;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt_type(), target);
  }
  
  // optional int32 int_opt = 2;
  if (has_int_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_opt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Setsockopt_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opt_type = 1;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_type());
    }
    
    // optional int32 int_opt = 2;
    if (has_int_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_opt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Setsockopt_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Setsockopt_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Setsockopt_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Setsockopt_Msg::MergeFrom(const X_Setsockopt_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_int_opt()) {
      set_int_opt(from.int_opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Setsockopt_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Setsockopt_Msg::CopyFrom(const X_Setsockopt_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Setsockopt_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Setsockopt_Msg::Swap(X_Setsockopt_Msg* other) {
  if (other != this) {
    std::swap(opt_type_, other->opt_type_);
    std::swap(int_opt_, other->int_opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Setsockopt_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Setsockopt_Msg_descriptor_;
  metadata.reflection = X_Setsockopt_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Getsockopt_Msg::kOptTypeFieldNumber;
const int X_Getsockopt_Msg::kIntOptFieldNumber;
#endif  // !_MSC_VER

X_Getsockopt_Msg::X_Getsockopt_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Getsockopt_Msg::InitAsDefaultInstance() {
}

X_Getsockopt_Msg::X_Getsockopt_Msg(const X_Getsockopt_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Getsockopt_Msg::SharedCtor() {
  _cached_size_ = 0;
  opt_type_ = 0;
  int_opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Getsockopt_Msg::~X_Getsockopt_Msg() {
  SharedDtor();
}

void X_Getsockopt_Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void X_Getsockopt_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Getsockopt_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Getsockopt_Msg_descriptor_;
}

const X_Getsockopt_Msg& X_Getsockopt_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Getsockopt_Msg* X_Getsockopt_Msg::default_instance_ = NULL;

X_Getsockopt_Msg* X_Getsockopt_Msg::New() const {
  return new X_Getsockopt_Msg;
}

void X_Getsockopt_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_type_ = 0;
    int_opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Getsockopt_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opt_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_opt;
        break;
      }
      
      // optional int32 int_opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_opt_)));
          set_has_int_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Getsockopt_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opt_type = 1;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt_type(), output);
  }
  
  // optional int32 int_opt = 2;
  if (has_int_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_opt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Getsockopt_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opt_type = 1;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt_type(), target);
  }
  
  // optional int32 int_opt = 2;
  if (has_int_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_opt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Getsockopt_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opt_type = 1;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_type());
    }
    
    // optional int32 int_opt = 2;
    if (has_int_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_opt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Getsockopt_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Getsockopt_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Getsockopt_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Getsockopt_Msg::MergeFrom(const X_Getsockopt_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_int_opt()) {
      set_int_opt(from.int_opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Getsockopt_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Getsockopt_Msg::CopyFrom(const X_Getsockopt_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Getsockopt_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Getsockopt_Msg::Swap(X_Getsockopt_Msg* other) {
  if (other != this) {
    std::swap(opt_type_, other->opt_type_);
    std::swap(int_opt_, other->int_opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Getsockopt_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Getsockopt_Msg_descriptor_;
  metadata.reflection = X_Getsockopt_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Putchunk_Msg::kCachepolicyFieldNumber;
const int X_Putchunk_Msg::kCachesizeFieldNumber;
const int X_Putchunk_Msg::kContextidFieldNumber;
const int X_Putchunk_Msg::kTTLFieldNumber;
const int X_Putchunk_Msg::kPayloadFieldNumber;
const int X_Putchunk_Msg::kCidFieldNumber;
const int X_Putchunk_Msg::kLengthFieldNumber;
const int X_Putchunk_Msg::kTimestampFieldNumber;
#endif  // !_MSC_VER

X_Putchunk_Msg::X_Putchunk_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Putchunk_Msg::InitAsDefaultInstance() {
}

X_Putchunk_Msg::X_Putchunk_Msg(const X_Putchunk_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Putchunk_Msg::SharedCtor() {
  _cached_size_ = 0;
  cachepolicy_ = 0;
  cachesize_ = 0;
  contextid_ = 0;
  ttl_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Putchunk_Msg::~X_Putchunk_Msg() {
  SharedDtor();
}

void X_Putchunk_Msg::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (this != default_instance_) {
  }
}

void X_Putchunk_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Putchunk_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Putchunk_Msg_descriptor_;
}

const X_Putchunk_Msg& X_Putchunk_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Putchunk_Msg* X_Putchunk_Msg::default_instance_ = NULL;

X_Putchunk_Msg* X_Putchunk_Msg::New() const {
  return new X_Putchunk_Msg;
}

void X_Putchunk_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cachepolicy_ = 0;
    cachesize_ = 0;
    contextid_ = 0;
    ttl_ = 0;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    length_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Putchunk_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cachepolicy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cachepolicy_)));
          set_has_cachepolicy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cachesize;
        break;
      }
      
      // required int32 cachesize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cachesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cachesize_)));
          set_has_cachesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contextid;
        break;
      }
      
      // required int32 contextid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contextid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contextid_)));
          set_has_contextid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TTL;
        break;
      }
      
      // required int32 TTL = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TTL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cid;
        break;
      }
      
      // optional string cid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_length;
        break;
      }
      
      // optional int32 length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timestamp;
        break;
      }
      
      // optional int64 timestamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Putchunk_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cachepolicy = 1;
  if (has_cachepolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cachepolicy(), output);
  }
  
  // required int32 cachesize = 2;
  if (has_cachesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cachesize(), output);
  }
  
  // required int32 contextid = 3;
  if (has_contextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->contextid(), output);
  }
  
  // required int32 TTL = 4;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ttl(), output);
  }
  
  // required bytes payload = 5;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->payload(), output);
  }
  
  // optional string cid = 6;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cid(), output);
  }
  
  // optional int32 length = 7;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->length(), output);
  }
  
  // optional int64 timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Putchunk_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cachepolicy = 1;
  if (has_cachepolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cachepolicy(), target);
  }
  
  // required int32 cachesize = 2;
  if (has_cachesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cachesize(), target);
  }
  
  // required int32 contextid = 3;
  if (has_contextid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->contextid(), target);
  }
  
  // required int32 TTL = 4;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ttl(), target);
  }
  
  // required bytes payload = 5;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->payload(), target);
  }
  
  // optional string cid = 6;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cid(), target);
  }
  
  // optional int32 length = 7;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->length(), target);
  }
  
  // optional int64 timestamp = 8;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Putchunk_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cachepolicy = 1;
    if (has_cachepolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cachepolicy());
    }
    
    // required int32 cachesize = 2;
    if (has_cachesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cachesize());
    }
    
    // required int32 contextid = 3;
    if (has_contextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contextid());
    }
    
    // required int32 TTL = 4;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttl());
    }
    
    // required bytes payload = 5;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
    // optional string cid = 6;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }
    
    // optional int32 length = 7;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }
    
    // optional int64 timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Putchunk_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Putchunk_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Putchunk_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Putchunk_Msg::MergeFrom(const X_Putchunk_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cachepolicy()) {
      set_cachepolicy(from.cachepolicy());
    }
    if (from.has_cachesize()) {
      set_cachesize(from.cachesize());
    }
    if (from.has_contextid()) {
      set_contextid(from.contextid());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Putchunk_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Putchunk_Msg::CopyFrom(const X_Putchunk_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Putchunk_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void X_Putchunk_Msg::Swap(X_Putchunk_Msg* other) {
  if (other != this) {
    std::swap(cachepolicy_, other->cachepolicy_);
    std::swap(cachesize_, other->cachesize_);
    std::swap(contextid_, other->contextid_);
    std::swap(ttl_, other->ttl_);
    std::swap(payload_, other->payload_);
    std::swap(cid_, other->cid_);
    std::swap(length_, other->length_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Putchunk_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Putchunk_Msg_descriptor_;
  metadata.reflection = X_Putchunk_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Requestchunk_Msg::kDagFieldNumber;
const int X_Requestchunk_Msg::kPayloadFieldNumber;
#endif  // !_MSC_VER

X_Requestchunk_Msg::X_Requestchunk_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Requestchunk_Msg::InitAsDefaultInstance() {
}

X_Requestchunk_Msg::X_Requestchunk_Msg(const X_Requestchunk_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Requestchunk_Msg::SharedCtor() {
  _cached_size_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Requestchunk_Msg::~X_Requestchunk_Msg() {
  SharedDtor();
}

void X_Requestchunk_Msg::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void X_Requestchunk_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Requestchunk_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Requestchunk_Msg_descriptor_;
}

const X_Requestchunk_Msg& X_Requestchunk_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Requestchunk_Msg* X_Requestchunk_Msg::default_instance_ = NULL;

X_Requestchunk_Msg* X_Requestchunk_Msg::New() const {
  return new X_Requestchunk_Msg;
}

void X_Requestchunk_Msg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  dag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Requestchunk_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dag(0).data(), this->dag(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dag;
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Requestchunk_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string dag = 1;
  for (int i = 0; i < this->dag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dag(i).data(), this->dag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dag(i), output);
  }
  
  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Requestchunk_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string dag = 1;
  for (int i = 0; i < this->dag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag(i).data(), this->dag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dag(i), target);
  }
  
  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Requestchunk_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  // repeated string dag = 1;
  total_size += 1 * this->dag_size();
  for (int i = 0; i < this->dag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dag(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Requestchunk_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Requestchunk_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Requestchunk_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Requestchunk_Msg::MergeFrom(const X_Requestchunk_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dag_.MergeFrom(from.dag_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Requestchunk_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Requestchunk_Msg::CopyFrom(const X_Requestchunk_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Requestchunk_Msg::IsInitialized() const {
  
  return true;
}

void X_Requestchunk_Msg::Swap(X_Requestchunk_Msg* other) {
  if (other != this) {
    dag_.Swap(&other->dag_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Requestchunk_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Requestchunk_Msg_descriptor_;
  metadata.reflection = X_Requestchunk_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Getchunkstatus_Msg::kDagFieldNumber;
const int X_Getchunkstatus_Msg::kStatusFieldNumber;
const int X_Getchunkstatus_Msg::kPayloadFieldNumber;
#endif  // !_MSC_VER

X_Getchunkstatus_Msg::X_Getchunkstatus_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Getchunkstatus_Msg::InitAsDefaultInstance() {
}

X_Getchunkstatus_Msg::X_Getchunkstatus_Msg(const X_Getchunkstatus_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Getchunkstatus_Msg::SharedCtor() {
  _cached_size_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Getchunkstatus_Msg::~X_Getchunkstatus_Msg() {
  SharedDtor();
}

void X_Getchunkstatus_Msg::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void X_Getchunkstatus_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Getchunkstatus_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Getchunkstatus_Msg_descriptor_;
}

const X_Getchunkstatus_Msg& X_Getchunkstatus_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Getchunkstatus_Msg* X_Getchunkstatus_Msg::default_instance_ = NULL;

X_Getchunkstatus_Msg* X_Getchunkstatus_Msg::New() const {
  return new X_Getchunkstatus_Msg;
}

void X_Getchunkstatus_Msg::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  dag_.Clear();
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Getchunkstatus_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dag(0).data(), this->dag(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dag;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // repeated string status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status(0).data(), this->status(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Getchunkstatus_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string dag = 1;
  for (int i = 0; i < this->dag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dag(i).data(), this->dag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dag(i), output);
  }
  
  // repeated string status = 2;
  for (int i = 0; i < this->status_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->status(i).data(), this->status(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->status(i), output);
  }
  
  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Getchunkstatus_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string dag = 1;
  for (int i = 0; i < this->dag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag(i).data(), this->dag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dag(i), target);
  }
  
  // repeated string status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status(i).data(), this->status(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->status(i), target);
  }
  
  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Getchunkstatus_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  // repeated string dag = 1;
  total_size += 1 * this->dag_size();
  for (int i = 0; i < this->dag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dag(i));
  }
  
  // repeated string status = 2;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Getchunkstatus_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Getchunkstatus_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Getchunkstatus_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Getchunkstatus_Msg::MergeFrom(const X_Getchunkstatus_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dag_.MergeFrom(from.dag_);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Getchunkstatus_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Getchunkstatus_Msg::CopyFrom(const X_Getchunkstatus_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Getchunkstatus_Msg::IsInitialized() const {
  
  return true;
}

void X_Getchunkstatus_Msg::Swap(X_Getchunkstatus_Msg* other) {
  if (other != this) {
    dag_.Swap(&other->dag_);
    status_.Swap(&other->status_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Getchunkstatus_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Getchunkstatus_Msg_descriptor_;
  metadata.reflection = X_Getchunkstatus_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Readchunk_Msg::kDagFieldNumber;
const int X_Readchunk_Msg::kPayloadFieldNumber;
#endif  // !_MSC_VER

X_Readchunk_Msg::X_Readchunk_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Readchunk_Msg::InitAsDefaultInstance() {
}

X_Readchunk_Msg::X_Readchunk_Msg(const X_Readchunk_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Readchunk_Msg::SharedCtor() {
  _cached_size_ = 0;
  dag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Readchunk_Msg::~X_Readchunk_Msg() {
  SharedDtor();
}

void X_Readchunk_Msg::SharedDtor() {
  if (dag_ != &::google::protobuf::internal::kEmptyString) {
    delete dag_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void X_Readchunk_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Readchunk_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Readchunk_Msg_descriptor_;
}

const X_Readchunk_Msg& X_Readchunk_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Readchunk_Msg* X_Readchunk_Msg::default_instance_ = NULL;

X_Readchunk_Msg* X_Readchunk_Msg::New() const {
  return new X_Readchunk_Msg;
}

void X_Readchunk_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dag()) {
      if (dag_ != &::google::protobuf::internal::kEmptyString) {
        dag_->clear();
      }
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Readchunk_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dag().data(), this->dag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Readchunk_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dag(), output);
  }
  
  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Readchunk_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dag(), target);
  }
  
  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Readchunk_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dag = 1;
    if (has_dag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dag());
    }
    
    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Readchunk_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Readchunk_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Readchunk_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Readchunk_Msg::MergeFrom(const X_Readchunk_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dag()) {
      set_dag(from.dag());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Readchunk_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Readchunk_Msg::CopyFrom(const X_Readchunk_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Readchunk_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Readchunk_Msg::Swap(X_Readchunk_Msg* other) {
  if (other != this) {
    std::swap(dag_, other->dag_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Readchunk_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Readchunk_Msg_descriptor_;
  metadata.reflection = X_Readchunk_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Removechunk_Msg::kContextidFieldNumber;
const int X_Removechunk_Msg::kCidFieldNumber;
const int X_Removechunk_Msg::kStatusFieldNumber;
#endif  // !_MSC_VER

X_Removechunk_Msg::X_Removechunk_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Removechunk_Msg::InitAsDefaultInstance() {
}

X_Removechunk_Msg::X_Removechunk_Msg(const X_Removechunk_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Removechunk_Msg::SharedCtor() {
  _cached_size_ = 0;
  contextid_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Removechunk_Msg::~X_Removechunk_Msg() {
  SharedDtor();
}

void X_Removechunk_Msg::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (this != default_instance_) {
  }
}

void X_Removechunk_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Removechunk_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Removechunk_Msg_descriptor_;
}

const X_Removechunk_Msg& X_Removechunk_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Removechunk_Msg* X_Removechunk_Msg::default_instance_ = NULL;

X_Removechunk_Msg* X_Removechunk_Msg::New() const {
  return new X_Removechunk_Msg;
}

void X_Removechunk_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contextid_ = 0;
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Removechunk_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 contextid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contextid_)));
          set_has_contextid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cid;
        break;
      }
      
      // required string cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Removechunk_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 contextid = 1;
  if (has_contextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->contextid(), output);
  }
  
  // required string cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cid(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Removechunk_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 contextid = 1;
  if (has_contextid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->contextid(), target);
  }
  
  // required string cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Removechunk_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 contextid = 1;
    if (has_contextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contextid());
    }
    
    // required string cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Removechunk_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Removechunk_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Removechunk_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Removechunk_Msg::MergeFrom(const X_Removechunk_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contextid()) {
      set_contextid(from.contextid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Removechunk_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Removechunk_Msg::CopyFrom(const X_Removechunk_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Removechunk_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void X_Removechunk_Msg::Swap(X_Removechunk_Msg* other) {
  if (other != this) {
    std::swap(contextid_, other->contextid_);
    std::swap(cid_, other->cid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Removechunk_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Removechunk_Msg_descriptor_;
  metadata.reflection = X_Removechunk_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Result_Msg::kTypeFieldNumber;
const int X_Result_Msg::kReturnCodeFieldNumber;
const int X_Result_Msg::kErrCodeFieldNumber;
#endif  // !_MSC_VER

X_Result_Msg::X_Result_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Result_Msg::InitAsDefaultInstance() {
}

X_Result_Msg::X_Result_Msg(const X_Result_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Result_Msg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  return_code_ = 0;
  err_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Result_Msg::~X_Result_Msg() {
  SharedDtor();
}

void X_Result_Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void X_Result_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Result_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Result_Msg_descriptor_;
}

const X_Result_Msg& X_Result_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Result_Msg* X_Result_Msg::default_instance_ = NULL;

X_Result_Msg* X_Result_Msg::New() const {
  return new X_Result_Msg;
}

void X_Result_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    return_code_ = 0;
    err_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Result_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xia.XSocketCallType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (xia::XSocketCallType_IsValid(value)) {
            set_type(static_cast< xia::XSocketCallType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_return_code;
        break;
      }
      
      // required int32 return_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_code_)));
          set_has_return_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_code;
        break;
      }
      
      // optional int32 err_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Result_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xia.XSocketCallType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required int32 return_code = 2;
  if (has_return_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->return_code(), output);
  }
  
  // optional int32 err_code = 3;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Result_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xia.XSocketCallType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required int32 return_code = 2;
  if (has_return_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->return_code(), target);
  }
  
  // optional int32 err_code = 3;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Result_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xia.XSocketCallType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int32 return_code = 2;
    if (has_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_code());
    }
    
    // optional int32 err_code = 3;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Result_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Result_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Result_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Result_Msg::MergeFrom(const X_Result_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_return_code()) {
      set_return_code(from.return_code());
    }
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Result_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Result_Msg::CopyFrom(const X_Result_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Result_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void X_Result_Msg::Swap(X_Result_Msg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(return_code_, other->return_code_);
    std::swap(err_code_, other->err_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Result_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Result_Msg_descriptor_;
  metadata.reflection = X_Result_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Requestfailed_Msg::kTypeFieldNumber;
const int X_Requestfailed_Msg::kTempFieldNumber;
#endif  // !_MSC_VER

X_Requestfailed_Msg::X_Requestfailed_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Requestfailed_Msg::InitAsDefaultInstance() {
}

X_Requestfailed_Msg::X_Requestfailed_Msg(const X_Requestfailed_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Requestfailed_Msg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  temp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Requestfailed_Msg::~X_Requestfailed_Msg() {
  SharedDtor();
}

void X_Requestfailed_Msg::SharedDtor() {
  if (temp_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_;
  }
  if (this != default_instance_) {
  }
}

void X_Requestfailed_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Requestfailed_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Requestfailed_Msg_descriptor_;
}

const X_Requestfailed_Msg& X_Requestfailed_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Requestfailed_Msg* X_Requestfailed_Msg::default_instance_ = NULL;

X_Requestfailed_Msg* X_Requestfailed_Msg::New() const {
  return new X_Requestfailed_Msg;
}

void X_Requestfailed_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_temp()) {
      if (temp_ != &::google::protobuf::internal::kEmptyString) {
        temp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Requestfailed_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_temp;
        break;
      }
      
      // optional string temp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->temp().data(), this->temp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Requestfailed_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string temp = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->temp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Requestfailed_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string temp = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->temp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Requestfailed_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string temp = 2;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->temp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Requestfailed_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Requestfailed_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Requestfailed_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Requestfailed_Msg::MergeFrom(const X_Requestfailed_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Requestfailed_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Requestfailed_Msg::CopyFrom(const X_Requestfailed_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Requestfailed_Msg::IsInitialized() const {
  
  return true;
}

void X_Requestfailed_Msg::Swap(X_Requestfailed_Msg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(temp_, other->temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Requestfailed_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Requestfailed_Msg_descriptor_;
  metadata.reflection = X_Requestfailed_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Changead_Msg::kAdFieldNumber;
const int X_Changead_Msg::kIp4IdFieldNumber;
#endif  // !_MSC_VER

X_Changead_Msg::X_Changead_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Changead_Msg::InitAsDefaultInstance() {
}

X_Changead_Msg::X_Changead_Msg(const X_Changead_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Changead_Msg::SharedCtor() {
  _cached_size_ = 0;
  ad_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip4id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Changead_Msg::~X_Changead_Msg() {
  SharedDtor();
}

void X_Changead_Msg::SharedDtor() {
  if (ad_ != &::google::protobuf::internal::kEmptyString) {
    delete ad_;
  }
  if (ip4id_ != &::google::protobuf::internal::kEmptyString) {
    delete ip4id_;
  }
  if (this != default_instance_) {
  }
}

void X_Changead_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Changead_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Changead_Msg_descriptor_;
}

const X_Changead_Msg& X_Changead_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Changead_Msg* X_Changead_Msg::default_instance_ = NULL;

X_Changead_Msg* X_Changead_Msg::New() const {
  return new X_Changead_Msg;
}

void X_Changead_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ad()) {
      if (ad_ != &::google::protobuf::internal::kEmptyString) {
        ad_->clear();
      }
    }
    if (has_ip4id()) {
      if (ip4id_ != &::google::protobuf::internal::kEmptyString) {
        ip4id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Changead_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ad = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ad().data(), this->ad().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip4id;
        break;
      }
      
      // optional string ip4id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip4id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip4id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip4id().data(), this->ip4id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Changead_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ad = 1;
  if (has_ad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad().data(), this->ad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ad(), output);
  }
  
  // optional string ip4id = 2;
  if (has_ip4id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip4id().data(), this->ip4id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip4id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Changead_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ad = 1;
  if (has_ad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad().data(), this->ad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ad(), target);
  }
  
  // optional string ip4id = 2;
  if (has_ip4id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip4id().data(), this->ip4id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip4id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Changead_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ad = 1;
    if (has_ad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ad());
    }
    
    // optional string ip4id = 2;
    if (has_ip4id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip4id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Changead_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Changead_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Changead_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Changead_Msg::MergeFrom(const X_Changead_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ad()) {
      set_ad(from.ad());
    }
    if (from.has_ip4id()) {
      set_ip4id(from.ip4id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Changead_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Changead_Msg::CopyFrom(const X_Changead_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Changead_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Changead_Msg::Swap(X_Changead_Msg* other) {
  if (other != this) {
    std::swap(ad_, other->ad_);
    std::swap(ip4id_, other->ip4id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Changead_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Changead_Msg_descriptor_;
  metadata.reflection = X_Changead_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_ReadLocalHostAddr_Msg::kAdFieldNumber;
const int X_ReadLocalHostAddr_Msg::kHidFieldNumber;
const int X_ReadLocalHostAddr_Msg::kIp4IdFieldNumber;
#endif  // !_MSC_VER

X_ReadLocalHostAddr_Msg::X_ReadLocalHostAddr_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_ReadLocalHostAddr_Msg::InitAsDefaultInstance() {
}

X_ReadLocalHostAddr_Msg::X_ReadLocalHostAddr_Msg(const X_ReadLocalHostAddr_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_ReadLocalHostAddr_Msg::SharedCtor() {
  _cached_size_ = 0;
  ad_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip4id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_ReadLocalHostAddr_Msg::~X_ReadLocalHostAddr_Msg() {
  SharedDtor();
}

void X_ReadLocalHostAddr_Msg::SharedDtor() {
  if (ad_ != &::google::protobuf::internal::kEmptyString) {
    delete ad_;
  }
  if (hid_ != &::google::protobuf::internal::kEmptyString) {
    delete hid_;
  }
  if (ip4id_ != &::google::protobuf::internal::kEmptyString) {
    delete ip4id_;
  }
  if (this != default_instance_) {
  }
}

void X_ReadLocalHostAddr_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_ReadLocalHostAddr_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_ReadLocalHostAddr_Msg_descriptor_;
}

const X_ReadLocalHostAddr_Msg& X_ReadLocalHostAddr_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_ReadLocalHostAddr_Msg* X_ReadLocalHostAddr_Msg::default_instance_ = NULL;

X_ReadLocalHostAddr_Msg* X_ReadLocalHostAddr_Msg::New() const {
  return new X_ReadLocalHostAddr_Msg;
}

void X_ReadLocalHostAddr_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ad()) {
      if (ad_ != &::google::protobuf::internal::kEmptyString) {
        ad_->clear();
      }
    }
    if (has_hid()) {
      if (hid_ != &::google::protobuf::internal::kEmptyString) {
        hid_->clear();
      }
    }
    if (has_ip4id()) {
      if (ip4id_ != &::google::protobuf::internal::kEmptyString) {
        ip4id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_ReadLocalHostAddr_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ad = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ad().data(), this->ad().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hid;
        break;
      }
      
      // optional string hid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hid().data(), this->hid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip4id;
        break;
      }
      
      // optional string ip4id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip4id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip4id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip4id().data(), this->ip4id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_ReadLocalHostAddr_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ad = 1;
  if (has_ad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad().data(), this->ad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ad(), output);
  }
  
  // optional string hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hid().data(), this->hid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hid(), output);
  }
  
  // optional string ip4id = 3;
  if (has_ip4id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip4id().data(), this->ip4id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip4id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_ReadLocalHostAddr_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ad = 1;
  if (has_ad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad().data(), this->ad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ad(), target);
  }
  
  // optional string hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hid().data(), this->hid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hid(), target);
  }
  
  // optional string ip4id = 3;
  if (has_ip4id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip4id().data(), this->ip4id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip4id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_ReadLocalHostAddr_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ad = 1;
    if (has_ad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ad());
    }
    
    // optional string hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hid());
    }
    
    // optional string ip4id = 3;
    if (has_ip4id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip4id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_ReadLocalHostAddr_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_ReadLocalHostAddr_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_ReadLocalHostAddr_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_ReadLocalHostAddr_Msg::MergeFrom(const X_ReadLocalHostAddr_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ad()) {
      set_ad(from.ad());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_ip4id()) {
      set_ip4id(from.ip4id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_ReadLocalHostAddr_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_ReadLocalHostAddr_Msg::CopyFrom(const X_ReadLocalHostAddr_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_ReadLocalHostAddr_Msg::IsInitialized() const {
  
  return true;
}

void X_ReadLocalHostAddr_Msg::Swap(X_ReadLocalHostAddr_Msg* other) {
  if (other != this) {
    std::swap(ad_, other->ad_);
    std::swap(hid_, other->hid_);
    std::swap(ip4id_, other->ip4id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_ReadLocalHostAddr_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_ReadLocalHostAddr_Msg_descriptor_;
  metadata.reflection = X_ReadLocalHostAddr_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_Updatenameserverdag_Msg::kDagFieldNumber;
#endif  // !_MSC_VER

X_Updatenameserverdag_Msg::X_Updatenameserverdag_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_Updatenameserverdag_Msg::InitAsDefaultInstance() {
}

X_Updatenameserverdag_Msg::X_Updatenameserverdag_Msg(const X_Updatenameserverdag_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_Updatenameserverdag_Msg::SharedCtor() {
  _cached_size_ = 0;
  dag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_Updatenameserverdag_Msg::~X_Updatenameserverdag_Msg() {
  SharedDtor();
}

void X_Updatenameserverdag_Msg::SharedDtor() {
  if (dag_ != &::google::protobuf::internal::kEmptyString) {
    delete dag_;
  }
  if (this != default_instance_) {
  }
}

void X_Updatenameserverdag_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_Updatenameserverdag_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_Updatenameserverdag_Msg_descriptor_;
}

const X_Updatenameserverdag_Msg& X_Updatenameserverdag_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_Updatenameserverdag_Msg* X_Updatenameserverdag_Msg::default_instance_ = NULL;

X_Updatenameserverdag_Msg* X_Updatenameserverdag_Msg::New() const {
  return new X_Updatenameserverdag_Msg;
}

void X_Updatenameserverdag_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dag()) {
      if (dag_ != &::google::protobuf::internal::kEmptyString) {
        dag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_Updatenameserverdag_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dag().data(), this->dag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_Updatenameserverdag_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_Updatenameserverdag_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_Updatenameserverdag_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dag = 1;
    if (has_dag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_Updatenameserverdag_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_Updatenameserverdag_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_Updatenameserverdag_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_Updatenameserverdag_Msg::MergeFrom(const X_Updatenameserverdag_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dag()) {
      set_dag(from.dag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_Updatenameserverdag_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_Updatenameserverdag_Msg::CopyFrom(const X_Updatenameserverdag_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_Updatenameserverdag_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void X_Updatenameserverdag_Msg::Swap(X_Updatenameserverdag_Msg* other) {
  if (other != this) {
    std::swap(dag_, other->dag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_Updatenameserverdag_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_Updatenameserverdag_Msg_descriptor_;
  metadata.reflection = X_Updatenameserverdag_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_ReadNameServerDag_Msg::kDagFieldNumber;
#endif  // !_MSC_VER

X_ReadNameServerDag_Msg::X_ReadNameServerDag_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_ReadNameServerDag_Msg::InitAsDefaultInstance() {
}

X_ReadNameServerDag_Msg::X_ReadNameServerDag_Msg(const X_ReadNameServerDag_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_ReadNameServerDag_Msg::SharedCtor() {
  _cached_size_ = 0;
  dag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_ReadNameServerDag_Msg::~X_ReadNameServerDag_Msg() {
  SharedDtor();
}

void X_ReadNameServerDag_Msg::SharedDtor() {
  if (dag_ != &::google::protobuf::internal::kEmptyString) {
    delete dag_;
  }
  if (this != default_instance_) {
  }
}

void X_ReadNameServerDag_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_ReadNameServerDag_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_ReadNameServerDag_Msg_descriptor_;
}

const X_ReadNameServerDag_Msg& X_ReadNameServerDag_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_ReadNameServerDag_Msg* X_ReadNameServerDag_Msg::default_instance_ = NULL;

X_ReadNameServerDag_Msg* X_ReadNameServerDag_Msg::New() const {
  return new X_ReadNameServerDag_Msg;
}

void X_ReadNameServerDag_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dag()) {
      if (dag_ != &::google::protobuf::internal::kEmptyString) {
        dag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_ReadNameServerDag_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dag().data(), this->dag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_ReadNameServerDag_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_ReadNameServerDag_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_ReadNameServerDag_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dag = 1;
    if (has_dag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_ReadNameServerDag_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_ReadNameServerDag_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_ReadNameServerDag_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_ReadNameServerDag_Msg::MergeFrom(const X_ReadNameServerDag_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dag()) {
      set_dag(from.dag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_ReadNameServerDag_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_ReadNameServerDag_Msg::CopyFrom(const X_ReadNameServerDag_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_ReadNameServerDag_Msg::IsInitialized() const {
  
  return true;
}

void X_ReadNameServerDag_Msg::Swap(X_ReadNameServerDag_Msg* other) {
  if (other != this) {
    std::swap(dag_, other->dag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_ReadNameServerDag_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_ReadNameServerDag_Msg_descriptor_;
  metadata.reflection = X_ReadNameServerDag_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_IsDualStackRouter_Msg::kFlagFieldNumber;
#endif  // !_MSC_VER

X_IsDualStackRouter_Msg::X_IsDualStackRouter_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_IsDualStackRouter_Msg::InitAsDefaultInstance() {
}

X_IsDualStackRouter_Msg::X_IsDualStackRouter_Msg(const X_IsDualStackRouter_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_IsDualStackRouter_Msg::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_IsDualStackRouter_Msg::~X_IsDualStackRouter_Msg() {
  SharedDtor();
}

void X_IsDualStackRouter_Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void X_IsDualStackRouter_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_IsDualStackRouter_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_IsDualStackRouter_Msg_descriptor_;
}

const X_IsDualStackRouter_Msg& X_IsDualStackRouter_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_IsDualStackRouter_Msg* X_IsDualStackRouter_Msg::default_instance_ = NULL;

X_IsDualStackRouter_Msg* X_IsDualStackRouter_Msg::New() const {
  return new X_IsDualStackRouter_Msg;
}

void X_IsDualStackRouter_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_IsDualStackRouter_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_IsDualStackRouter_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_IsDualStackRouter_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_IsDualStackRouter_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_IsDualStackRouter_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_IsDualStackRouter_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_IsDualStackRouter_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_IsDualStackRouter_Msg::MergeFrom(const X_IsDualStackRouter_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_IsDualStackRouter_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_IsDualStackRouter_Msg::CopyFrom(const X_IsDualStackRouter_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_IsDualStackRouter_Msg::IsInitialized() const {
  
  return true;
}

void X_IsDualStackRouter_Msg::Swap(X_IsDualStackRouter_Msg* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_IsDualStackRouter_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_IsDualStackRouter_Msg_descriptor_;
  metadata.reflection = X_IsDualStackRouter_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_GetPeername_Msg::kDagFieldNumber;
#endif  // !_MSC_VER

X_GetPeername_Msg::X_GetPeername_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_GetPeername_Msg::InitAsDefaultInstance() {
}

X_GetPeername_Msg::X_GetPeername_Msg(const X_GetPeername_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_GetPeername_Msg::SharedCtor() {
  _cached_size_ = 0;
  dag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_GetPeername_Msg::~X_GetPeername_Msg() {
  SharedDtor();
}

void X_GetPeername_Msg::SharedDtor() {
  if (dag_ != &::google::protobuf::internal::kEmptyString) {
    delete dag_;
  }
  if (this != default_instance_) {
  }
}

void X_GetPeername_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_GetPeername_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_GetPeername_Msg_descriptor_;
}

const X_GetPeername_Msg& X_GetPeername_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_GetPeername_Msg* X_GetPeername_Msg::default_instance_ = NULL;

X_GetPeername_Msg* X_GetPeername_Msg::New() const {
  return new X_GetPeername_Msg;
}

void X_GetPeername_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dag()) {
      if (dag_ != &::google::protobuf::internal::kEmptyString) {
        dag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_GetPeername_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dag().data(), this->dag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_GetPeername_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_GetPeername_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_GetPeername_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dag = 1;
    if (has_dag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_GetPeername_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_GetPeername_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_GetPeername_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_GetPeername_Msg::MergeFrom(const X_GetPeername_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dag()) {
      set_dag(from.dag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_GetPeername_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_GetPeername_Msg::CopyFrom(const X_GetPeername_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_GetPeername_Msg::IsInitialized() const {
  
  return true;
}

void X_GetPeername_Msg::Swap(X_GetPeername_Msg* other) {
  if (other != this) {
    std::swap(dag_, other->dag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_GetPeername_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_GetPeername_Msg_descriptor_;
  metadata.reflection = X_GetPeername_Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int X_GetSockname_Msg::kDagFieldNumber;
#endif  // !_MSC_VER

X_GetSockname_Msg::X_GetSockname_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void X_GetSockname_Msg::InitAsDefaultInstance() {
}

X_GetSockname_Msg::X_GetSockname_Msg(const X_GetSockname_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void X_GetSockname_Msg::SharedCtor() {
  _cached_size_ = 0;
  dag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

X_GetSockname_Msg::~X_GetSockname_Msg() {
  SharedDtor();
}

void X_GetSockname_Msg::SharedDtor() {
  if (dag_ != &::google::protobuf::internal::kEmptyString) {
    delete dag_;
  }
  if (this != default_instance_) {
  }
}

void X_GetSockname_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_GetSockname_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return X_GetSockname_Msg_descriptor_;
}

const X_GetSockname_Msg& X_GetSockname_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

X_GetSockname_Msg* X_GetSockname_Msg::default_instance_ = NULL;

X_GetSockname_Msg* X_GetSockname_Msg::New() const {
  return new X_GetSockname_Msg;
}

void X_GetSockname_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dag()) {
      if (dag_ != &::google::protobuf::internal::kEmptyString) {
        dag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool X_GetSockname_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dag().data(), this->dag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void X_GetSockname_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* X_GetSockname_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dag = 1;
  if (has_dag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dag().data(), this->dag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int X_GetSockname_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dag = 1;
    if (has_dag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_GetSockname_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const X_GetSockname_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const X_GetSockname_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void X_GetSockname_Msg::MergeFrom(const X_GetSockname_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dag()) {
      set_dag(from.dag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void X_GetSockname_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_GetSockname_Msg::CopyFrom(const X_GetSockname_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_GetSockname_Msg::IsInitialized() const {
  
  return true;
}

void X_GetSockname_Msg::Swap(X_GetSockname_Msg* other) {
  if (other != this) {
    std::swap(dag_, other->dag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata X_GetSockname_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = X_GetSockname_Msg_descriptor_;
  metadata.reflection = X_GetSockname_Msg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* msg_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_MsgType_descriptor_;
}
bool msg_MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const msg_MsgType msg::GETLOCALHID;
const msg_MsgType msg::GETCID;
const msg_MsgType msg::CONNECTSID;
const msg_MsgType msg::PUTCID;
const msg_MsgType msg::SERVESID;
const msg_MsgType msg::MsgType_MIN;
const msg_MsgType msg::MsgType_MAX;
const int msg::MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int msg::kAppidFieldNumber;
const int msg::kXidFieldNumber;
const int msg::kXiapathSrcFieldNumber;
const int msg::kXiapathDstFieldNumber;
const int msg::kPayloadFieldNumber;
const int msg::kTypeFieldNumber;
#endif  // !_MSC_VER

msg::msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg::InitAsDefaultInstance() {
}

msg::msg(const msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  xid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xiapath_src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xiapath_dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg::~msg() {
  SharedDtor();
}

void msg::SharedDtor() {
  if (xid_ != &::google::protobuf::internal::kEmptyString) {
    delete xid_;
  }
  if (xiapath_src_ != &::google::protobuf::internal::kEmptyString) {
    delete xiapath_src_;
  }
  if (xiapath_dst_ != &::google::protobuf::internal::kEmptyString) {
    delete xiapath_dst_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_descriptor_;
}

const msg& msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

msg* msg::default_instance_ = NULL;

msg* msg::New() const {
  return new msg;
}

void msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    if (has_xid()) {
      if (xid_ != &::google::protobuf::internal::kEmptyString) {
        xid_->clear();
      }
    }
    if (has_xiapath_src()) {
      if (xiapath_src_ != &::google::protobuf::internal::kEmptyString) {
        xiapath_src_->clear();
      }
    }
    if (has_xiapath_dst()) {
      if (xiapath_dst_ != &::google::protobuf::internal::kEmptyString) {
        xiapath_dst_->clear();
      }
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xid;
        break;
      }
      
      // optional bytes xid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .xia.msg.MsgType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::xia::msg_MsgType_IsValid(value)) {
            set_type(static_cast< ::xia::msg_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_xiapath_src;
        break;
      }
      
      // optional string xiapath_src = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xiapath_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xiapath_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xiapath_src().data(), this->xiapath_src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_xiapath_dst;
        break;
      }
      
      // optional string xiapath_dst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xiapath_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xiapath_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xiapath_dst().data(), this->xiapath_dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }
  
  // optional bytes xid = 2;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->xid(), output);
  }
  
  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }
  
  // optional .xia.msg.MsgType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional string xiapath_src = 5;
  if (has_xiapath_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xiapath_src().data(), this->xiapath_src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->xiapath_src(), output);
  }
  
  // optional string xiapath_dst = 6;
  if (has_xiapath_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xiapath_dst().data(), this->xiapath_dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->xiapath_dst(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }
  
  // optional bytes xid = 2;
  if (has_xid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->xid(), target);
  }
  
  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }
  
  // optional .xia.msg.MsgType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional string xiapath_src = 5;
  if (has_xiapath_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xiapath_src().data(), this->xiapath_src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->xiapath_src(), target);
  }
  
  // optional string xiapath_dst = 6;
  if (has_xiapath_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xiapath_dst().data(), this->xiapath_dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->xiapath_dst(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }
    
    // optional bytes xid = 2;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->xid());
    }
    
    // optional string xiapath_src = 5;
    if (has_xiapath_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xiapath_src());
    }
    
    // optional string xiapath_dst = 6;
    if (has_xiapath_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xiapath_dst());
    }
    
    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
    // optional .xia.msg.MsgType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg::MergeFrom(const msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_xiapath_src()) {
      set_xiapath_src(from.xiapath_src());
    }
    if (from.has_xiapath_dst()) {
      set_xiapath_dst(from.xiapath_dst());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg::CopyFrom(const msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg::IsInitialized() const {
  
  return true;
}

void msg::Swap(msg* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(xid_, other->xid_);
    std::swap(xiapath_src_, other->xiapath_src_);
    std::swap(xiapath_dst_, other->xiapath_dst_);
    std::swap(payload_, other->payload_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_descriptor_;
  metadata.reflection = msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_response::kAppidFieldNumber;
const int msg_response::kXidFieldNumber;
const int msg_response::kPayloadFieldNumber;
#endif  // !_MSC_VER

msg_response::msg_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_response::InitAsDefaultInstance() {
}

msg_response::msg_response(const msg_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_response::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_response::~msg_response() {
  SharedDtor();
}

void msg_response::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void msg_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_response_descriptor_;
}

const msg_response& msg_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xia_2eproto();  return *default_instance_;
}

msg_response* msg_response::default_instance_ = NULL;

msg_response* msg_response::New() const {
  return new msg_response;
}

void msg_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  xid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xid;
        break;
      }
      
      // repeated bytes xid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_xid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xid;
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }
      
      // optional string payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payload().data(), this->payload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }
  
  // repeated bytes xid = 2;
  for (int i = 0; i < this->xid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->xid(i), output);
  }
  
  // optional string payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }
  
  // repeated bytes xid = 2;
  for (int i = 0; i < this->xid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->xid(i), target);
  }
  
  // optional string payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }
    
    // optional string payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload());
    }
    
  }
  // repeated bytes xid = 2;
  total_size += 1 * this->xid_size();
  for (int i = 0; i < this->xid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->xid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_response::MergeFrom(const msg_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  xid_.MergeFrom(from.xid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_response::CopyFrom(const msg_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void msg_response::Swap(msg_response* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    xid_.Swap(&other->xid_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_response_descriptor_;
  metadata.reflection = msg_response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xia

// @@protoc_insertion_point(global_scope)
